<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>MemoryViewer</TITLE>
<META content="text/html; charset=utf-8" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css href="../data/style.css">
<META name=GENERATOR content="MSHTML 8.00.6001.23536"></HEAD>
<BODY>
<DIV align=justify>
<H1 class=pagetitle>MemoryViewer </H1><A class=type>Class: 
TGLMemoryViewer</A><BR><BR><A>MemoryViewer ����������� (view) is similar to the 
normal type (Viewer), but is intended for rendering of the scene in buffer in 
memory - the so-called offscreen buffer or p-buffer. The contents of this buffer 
can then be copied to the texture of the material. The main purpose of 
MemoryViewer - effects of post-processing, but he can find plenty of other 
applications. </A>
<HR>
<A name=MemoryViewerCreate></A>
<H1 class=name>MemoryViewerCreate </H1><A class=type>Real</A><A> </A><A 
class=function>MemoryViewerCreate =</A><A>( width,height as </A><A 
class=type>real</A><A> );</A> <BR><A>Creates a new ����������� view and returns 
its id.</A> <BR><A>Width,height - the width and height of the ������������ 
species (the size of the p-buffer).</A> 
<HR>
<A name=MemoryViewerSetCamera></A>
<H1 class=name>MemoryViewerSetCamera </H1><A class=type>Real</A><A> </A><A 
class=function>MemoryViewerSetCamera =</A><A>( memviewer,camera as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the camera, through which the 
����������� appearance should render the scene.</A> <BR><A>Memviewer - id 
������������ kind</A> <BR><A>Camera - id of the camera.</A> 
<HR>
<A name=MemoryViewerSetViewport></A>
<H1 class=name>MemoryViewerSetViewport </H1><A class=type>Real</A><A> </A><A 
class=function>MemoryViewerSetViewport =</A><A>( memviewer,x,y,width,height as 
</A><A class=type>real</A><A> );</A> <BR><A>Specifies the position and size of 
the �������� - the projection of the scene, you want to render: you can not 
render the entire frame, but only the fragment. <BR><A>Note that the size of the 
�������� and the size of the p-buffer are two different things: MemoryViewer can 
render ������� size is greater than the buffer - in this case, the frame will be 
appropriately scaled to fit in the buffer. This allows you to create the effects 
of post-processing with a small p-buffer, even when the actual rendering in high 
definition - for example, with the buffer of 128x128 for resolution of 1280x720 
(though, the more this difference, the lower the quality).</A> <BR><A>This 
function must cause each time before the render ����������� view (as The ������� 
every time maps when rendering conventional screen view).</A> <BR><A>Memviewer - 
id ������������ kind</A> <BR><A>X,Y position of the ��������. Relative to the 
top left corner.</A> <BR><A>Width,height - the size of the ��������.</A> 
<HR>
<A name=MemoryViewerRender></A>
<H1 class=name>MemoryViewerRender </H1><A class=type>Real</A><A> </A><A 
class=function>MemoryViewerRender =</A><A>( memviewer as </A><A 
class=type>real</A><A> );</A> <BR><A>Commits the drawing of the scene in the 
����������� view. Please note that The ���������� all visible objects in the 
scene, including on-screen (text and sprites) - if you do not, the 
pre-disconnect them visibility.</A> <BR><A>Memviewer - id ������������ view.</A> 

<HR>
<A name=MemoryViewerCopyToTexture></A>
<H1 class=name>MemoryViewerCopyToTexture </H1><A class=type>Real</A><A> </A><A 
class=function>MemoryViewerCopyToTexture =</A><A>( memviewer as </A><A 
class=type>real</A><A>, material as </A><A class=type>string</A><A> );</A> 
<BR><A>Copies the contents of the frame buffer ������������ species in the 
texture of the specified material. The texture should also be pre-established 
</A><A class=funclink 
href="../functions/material.htm#MaterialGenTexture">MaterialGenTexture 
function</A><A>. The size of the texture should correspond to the size of the 
������������ view.</A> <BR><A>Memviewer - id ������������ kind</A> <BR><A>The 
material is the name of the material.</A> 
<HR>
</DIV></BODY></HTML>
