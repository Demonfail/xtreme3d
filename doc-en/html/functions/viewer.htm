<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Viewer</TITLE>
<META content="text/html; charset=utf-8" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css href="../data/style.css">
<META name=GENERATOR content="MSHTML 8.00.6001.23536"></HEAD>
<BODY>
<DIV align=justify>
<H1 class=pagetitle>Viewer </H1><A class=type>Class: 
TGLSceneViewer</A><BR><BR><A class=ntext>View (Viewer) in the Xtreme3D is called 
a rectangular area of the window in which there is a vectorized the 3D scene. 
You can create several independent types, and all they can display the scene 
from different angles. Functions of the kind are on the second place on the 
importance after the engine functions, as they are the ones primarily 
responsible for the output of graphics.</A>
<HR>
 <A name=ViewerCreate></A>
<H1 class=name>ViewerCreate </H1><A class=type>Real</A><A> </A><A class=function 
name="">ViewerCreate =</A><A>( x,y,width,height,window h as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Creates a new view and returns 
its id. <BR><A>X,y</A> -coordinates of the species (upper left corner) on the 
Window Game Maker <BR><A>Width, height</A> , width and height of the type of 
<BR><A>Window h</A> - a window identifier (HWND) to bind the engine. The window 
id of the games in the GML returned to the function of the <A class=type>window 
handle</A>.</A> 
<HR>
<A name=ViewerSetCamera></A>
<H1 class=name>ViewerSetCamera </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerSetCamera =</A><A>( viewer,camera as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Determines the camera, you must 
use the view for a drawing of projection on the stage. You can use the same 
camera for several species, but usually each type is assigned to a separate 
camera. <BR><A>Viewer</A> - view id <BR><A>Camera</A> - id of the camera.</A> 
<HR>
<A name=ViewerEnableVSync></A>
<H1 class=name>ViewerEnableVSync </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerEnableVSync =</A><A>( viewer,of the VSM as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Enables or disables the 
vertical synchronization for the species. There is a common problem when the 
screen refresh is at variance with the rendering frames. This feature solves the 
problem of synchronizing, monitor and graphics card so that the FPS does not 
exceed the refresh rate of the screen. This is called the vertical 
synchronization. <BR><A>Viewer</A> - view id <BR><A>The Vsm</A> - <A 
class=constant name=vsmSync>vsmSync</A> or <A class=constant 
name=vsmNoSync>vsmNoSync</A> (0 and 1, respectively).</A> 
<HR>
<A name=ViewerSetAutoRender></A>
<H1 class=name>ViewerSetAutoRender </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerSetAutoRender =</A><A>( viewer,mode as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Enables or disables the 
automatic rendering of the view. If this option is disabled (the default is), it 
is necessary to render manual view the function of <A class=funclink 
href="../functions/viewer.htm#ViewerRender">ViewerRender</A>. <BR><A>Viewer</A> 
- view id <BR><A>Mode</A> - <A class=constant>true</A> or <A 
class=constant>false</A> (1 and 0, respectively).</A> 
<HR>
<A name=ViewerRender></A>
<H1 class=name>ViewerRender </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerRender =</A><A>( viewer as </A><A class=type>real</A><A> 
);</A> <BR><A class=ntext>Commits the rendering - the drawing of the projection 
and output on the screen. <BR><A>Viewer</A> - view id</A> 
<HR>
<A name=ViewerRenderToFile></A>
<H1 class=name>ViewerRenderToFile </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerRenderToFile =</A><A>( viewer as </A><A 
class=type>real</A><A>as filename as </A><A class=type>string</A><A> );</A> 
<BR><A class=ntext>Commits the rendering of species in the BMP file (in other 
words, makes the screenshot). <BR><A>Viewer</A> - view id <BR><A>Filename</A> is 
the name of the file BMP.</A> 
<HR>
<A name=ViewerRenderEx></A>
<H1 class=name>ViewerRenderEx </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerRenderEx =</A><A>( viewer,object,clear,swap,updateFPS as 
</A><A class=type>real</A><A> );</A> <BR><A class=ntext>Commits the rendering 
types with advanced options that allows you to organize the multipass encode 
rendering. Feature is designed for experienced users - do not call her if not 
sure what to do. <BR><A>Viewer</A> - view id</A> <BR><A>The object</A> is the 
object id that you want to render (and all of his descendants)</A> 
<BR><A>Clear</A> - Determines whether to fill the kind of background color 
before rendering - <A class=constant>true</A> or <A class=constant>false</A> (1 
and 0 respectively)</A> <BR><A>Swap</A> - Determines whether to switch primary 
and secondary buffers after rendering, is <A class=constant>true</A> or <A 
class=constant>false</A> (1 and 0, respectively). This is, in fact, displays the 
image on the screen. If you want to call this function several times during one 
step of the game cycle, in order to render a few objects separately, in this 
parameter should be <A class=constant>true</A> only once, at the time of the 
last call</A> <BR><A>UpdateFPS</A> - Specifies whether to upgrade the frequency 
counter - <A class=constant>true</A> or <A class=constant>false</A> (1 and 0, 
respectively). This setting is the same as for the previous - give it <A 
class=constant>true</A> only once per step, otherwise the <A class=funclink 
href="../functions/viewer.htm#ViewerGetFramesPerSecond">ViewerGetFramesPerSecond 
function</A> will produce an incorrect result.</A> 
<HR>
<A name=ViewerResize></A>
<H1 class=name>ViewerResize </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerResize =</A><A>( viewer,x,y,width,height as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Changes the position and size 
of the species. Usually in the games this is not required, but can be useful, 
for example, if you give the player an opportunity to stretch the window in 
windowed mode. Please note that this feature is quite slow and should not be 
triggered continuously. <BR><A>Viewer</A> - view id <BR><A>X,Y</A> - new 
coordinates (upper left corner) on the upper left corner of the Game Maker 
<BR><A>Width, height</A> - the new width and height of the species.</A> 
<HR>
<A name=ViewerGetSize></A>
<H1 class=name>ViewerGetSize </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerGetSize =</A><A>( viewer,index as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Returns the width or height of 
the species. <BR><A>Viewer</A> - view id <BR><A>Index</A> - if this option is 0, 
the function returns the width, if 1 is the height. 
<HR>
<A name=ViewerGetPosition></A>
<H1 class=name>ViewerGetPosition </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerGetPosition =</A><A>( viewer,index as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Returns the position of the 
species (coordinate of the upper-left corner) on the upper left corner of the 
Game Maker. <BR><A>Viewer</A> - view id <BR><A>Index</A> - if this option is 0, 
the function returns the X coordinate of the if 1 - Y. 
<HR>
<A name=ViewerSetVisible></A>
<H1 class=name>ViewerSetVisible </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerSetVisible =</A><A>( viewer,mode as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Hides or displays the view. 
Remember that the rendering for the hidden does not automatically terminated - 
to stop Rendering, you need to end the call <A class=funclink 
href="../functions/viewer.htm#ViewerRender">ViewerRender</A> for this species. 
<BR><A>Viewer</A> - view id <BR><A>Mode</A> - <A class=constant>true</A> or <A 
class=constant>false</A> (1 and 0, respectively).</A> 
<HR>
<A name=ViewerGetPixelColor></A>
<H1 class=name>ViewerGetPixelColor </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerGetPixelColor =</A><A>( viewer,x,y as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Returns the color of the pixel 
at position x,y relative to the upper left corner of the view. <BR><A>Viewer</A> 
- view id <BR><A>X,y</A> -coordinates of the pixel.</A> 
<HR>
<A name=ViewerGetPixelDepth></A>
<H1 class=name>ViewerGetPixelDepth </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerGetPixelDepth =</A><A>( viewer,x,y as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Returns the pixel depth in the 
Z-buffer at the position x,y relative to the upper left corner of the view. 
<BR><A>Viewer</A> - view id <BR><A>X,y</A> -coordinates of the pixel.</A> 
<HR>
<A name=ViewerSetLighting></A>
<H1 class=name>ViewerSetLighting </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerSetLighting =</A><A>( viewer,mode as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Enables or disables the 
lighting for the species. If the light is on when rendering objects will take 
into account the light sources, otherwise, the objects will be ���������� flat, 
without shading. <BR><A>Viewer</A> - view id <BR><A>Mode</A> - <A 
class=constant>true</A> or <A class=constant>false</A> (1 and 0, 
respectively).</A> 
<HR>
<A name=ViewerSetBackgroundColor></A>
<H1 class=name>ViewerSetBackgroundColor </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerSetBackgroundColor =</A><A>( viewer,color as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Determines the background color 
of the species. This is the color, which by default is filled all the empty 
space behind the objects. This is not very impressive, but in some cases enough. 
<BR><A>Viewer</A> - view id <BR><A>Color</A> - the color.</A> 
<HR>
<A name=ViewerSetAmbientColor></A>
<H1 class=name>ViewerSetAmbientColor </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerSetAmbientColor =</A><A>( viewer,color as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Determines the color of the 
surroundings. The color of the circle is used to set the overall shade of 
objects separately from the light sources and regardless of their color. An 
example: in the night of all objects, especially white, in the light of the 
������� seem ������������, regardless of their color. A similar effect is 
observed when using an infrared camera. <BR><A>Viewer</A> - view id 
<BR><A>Color</A> - the color.</A> 
<HR>
<A name=ViewerEnableFog></A>
<H1 class=name>ViewerEnableFog </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerEnableFog =</A><A>( viewer,mode as </A><A 
class=type>real</A> );</A> <BR><A class=ntext>Enables or disables the Fog for 
the view. The Fog is a very common effect. All objects beyond a certain distance 
gradually will be grayed out in the specified color as the estrangement. The 
most distant objects already do not have their own colors and are expected to 
fully merge with the background. <BR><A>Viewer</A> - view id <BR><A>Mode</A> - 
<A class=constant>true</A> or <A class=constant>false</A> (1 and 0, 
respectively).</A> 
<HR>
<A name=ViewerSetFogColor></A>
<H1 class=name>ViewerSetFogColor </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerSetFogColor =</A><A>( viewer,color as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Determines the color of the 
mist. <BR><A>Viewer</A> - view id <BR><A>Color</A> - the color.</A> 
<HR>
<A name=ViewerSetFogDistance></A>
<H1 class=name>ViewerSetFogDistance </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerSetFogDistance =</A><A>( viewer,start,end as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Determines the distance 
"�������������". <BR><A>Viewer</A> - view id <BR><A>Start</A> - the minimum 
distance, objects closer which is not exposed the mist <BR><A>End</A> - the 
maximum distance at which objects are completely painted in the color of the 
mist.</A> 
<HR>
<A name=ViewerScreenToWorld></A>
<H1 class=name>ViewerScreenToWorld </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerScreenToWorld =</A><A>( viewer,x,y,ind as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Converts a two-dimensional 
coordinates on the screen in the absolute 3D coordinates of the scene. (0.0) is 
the lower left corner of the screen. <BR><A>Viewer</A> - view id <BR><A>X,y</A> 
-coordinates of the screen <BR><A>Ind</A> - determines which coordinate should 
return the function: x if the ind=0, y if the ind=1, z if the ind=2.</A> 
<HR>
<A name=ViewerWorldToScreen></A>
<H1 class=name>ViewerWorldToScreen </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerWorldToScreen =</A><A>( viewer,x,y,z,ind as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Converts the absolute 3D 
coordinates of the scene in two-dimensional coordinates on the screen. (0.0) is 
the lower left corner of the screen. <BR><A>Viewer</A> - view id <BR><A>X,y</A> 
-coordinates of the screen <BR><A>Ind</A> - determines which coordinate should 
return the function: x if the ind=0, y if the ind=1, z if the ind=2.</A> 
<HR>
<A name=ViewerCopyToTexture></A>
<H1 class=name>ViewerCopyToTexture </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerCopyToTexture =</A><A>( viewer as </A><A 
class=type>real</A> <A>and material as </A><A class=type>string</A><A> );</A> 
<BR><A class=ntext>Copies the contents of a kind (������������) image in the 
texture of the material. <BR>Please note that this feature only works when the 
width and height of the species correspond to degrees of deuce (512, 256, 128, 
etc.). <BR><A>Viewer</A> - view id <BR><A>The material</A> is the name of the 
material.</A> 
<HR>
<A name=ViewerGetFramesPerSecond></A>
<H1 class=name>ViewerGetFramesPerSecond </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerGetFramesPerSecond =</A><A>( viewer as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Returns the number of frames 
per second, �������������� view (frames per second, FPS). <BR><A>Viewer</A> - id 
type.</A> 
<HR>
<A name=ViewerGetPickedObject></A>
<H1 class=name>ViewerGetPickedObject </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerGetPickedObject =</A><A>( viewer,x,y as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Returns the closest object, 
which corresponds to the target point on the screen. <BR><A>Viewer</A> - view id 
<BR><A>X,Y</A> - the coordinates on the screen.</A> 
<HR>
<A name=ViewerGetPickedObjectsList></A>
<H1 class=name>ViewerGetPickedObjectsList </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerGetPickedObjectsList =</A><A>( viewer,x,y,w,h,num,ind as 
</A><A class=type>real</A><A> );</A> <BR><A class=ntext>Returns an object from 
the list of objects that fall into the specified rectangular area on the screen. 
<BR><A>Viewer</A> - view id <BR><A>X,y</A> -coordinates of the upper left corner 
of the rectangle <BR><A>W,h</A> - the width and height of the rectangle 
<BR><A>Num</A> is approximate the expected number of objects <BR><A>Ind</A> - 
the index of the object in the list.</A> 
<HR>
<A name=ViewerScreenToVector></A>
<H1 class=name>ViewerScreenToVector </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerScreenToVector =</A><A>( viewer,x,y,ind as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Calculates the unit vector from 
the camera position type to the specified point on the screen. <BR><A>Viewer</A> 
- view id <BR><A>X,y</A> -coordinates of the screen <BR><A>Ind</A> - the index 
of the coordinates of the vector (0 = X 1 = Y 2 = Z).</A> 
<HR>
<A name=ViewerVectorToScreen></A>
<H1 class=name>ViewerVectorToScreen </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerVectorToScreen =</A><A>( viewer,x,y,z,ind as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Calculates the coordinates of 
the point on the screen, corresponding to the specified a single vector from the 
camera position. <BR><A>Viewer</A> - view id <BR><A>X,y,z</A> is a vector of 
<BR><A>Ind</A> - the index of the coordinates of the point (0 = X 1 = Y).</A> 
<HR>
<A name=ViewerPixelToDistance></A>
<H1 class=name>ViewerPixelToDistance </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerPixelToDistance =</A><A>( viewer,x,y as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Calculates the distance from 
the camera position type to the nearest object, which corresponds to the target 
point on the screen. <BR><A>Viewer</A> - view id <BR><A>X,Y</A> - the 
coordinates on the screen.</A> 
<HR>
<A name=ViewerSetAntiAliasing></A>
<H1 class=name>ViewerSetAntiAliasing </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerSetAntiAliasing =</A><A>( viewer,aa as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Specifies the mode-aliasing 
(smoothing) for the species, if it is supported by The ��������������. 
<BR><A>Viewer</A> - view id <BR><A>Aa</A> - A mode-aliasing. You have the 
following options: aa <BR><A class=constant name=aaDefault>AaDefault</A> = 0 - 
the default value (use the driver); <BR><A class=constant name=aaNone>AaNone</A> 
= 1 - anti-aliasing is off; <BR><A class=constant name=aa2x>Aa2x</A> = 2 - 
doubles the horizontal and vertical resolution; <BR><A class=constant 
name=aa2xHQ>Aa2xHQ</A> = 3 - same as the <A class=constant name=aa2x>aa2x</A>, 
but with the technology at The Quincunx graphics cards from NVIDIA that enhances 
the quality of the smooth; <BR><A class=constant name=aa4x>Aa4x</A> = 4 - 
���������� horizontal and vertical resolution; <BR><A class=constant 
name=aa4xHQ>Aa4xHQ</A><A> = 5 is the same as the <A class=constant 
name=aa2x>aa4x</A>, but with the technology at The Quincunx graphics cards from 
NVIDIA, which accelerates the Quality smoothing.</A> 
<HR>
<A name=ViewerSetOverrideMaterial></A>
<H1 class=name>ViewerSetOverrideMaterial </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerSetOverrideMaterial =</A><A>( viewer,matlib as </A><A 
class=type>real</A><A>, material as </A><A class=type>string</A><A> );</A> 
<BR><A class=ntext>Specifies the replacement material. This material will be 
used for all objects that ���������� views, and their own materials will be 
ignored. This ability to ������������ to implement some special effects and 
rendering techniques, such as deferred rendering. <BR><A>Viewer</A> - view 
id</A> <BR><A>Matlib</A> - id of the library materials</A> <BR><A>The 
material</A> is the name of the material in the library. If you pass an empty 
string, the replacement material will be disabled and the objects will be, as 
usual, rendered with their materials.</A> 
<HR>
<A name=ViewerGetFBOSupported></A>
<H1 class=name>ViewerGetFBOSupported </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerGetFBOSupported =</A><A>( viewer as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Returns true, if the video 
driver supports the staffing stops (FBO). <BR><A>Viewer</A> - id type.</A> 
<HR>
<A name=ViewerGetVBOSupported></A>
<H1 class=name>ViewerGetVBOSupported </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerGetVBOSupported =</A><A>( viewer as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Returns true, if the video 
driver supports vertex buffers VBO (). <BR><A>Viewer</A> - id type.</A> 
<HR>
<A name=ViewerGetGLSLSupported></A>
<H1 class=name>ViewerGetGLSLSupported </H1><A class=type>Real</A><A> </A><A 
class=function>ViewerGetGLSLSupported =</A><A>( viewer as </A><A 
class=type>real</A><A> );</A> <BR><A class=ntext>Returns true, if the video 
driver supports shaders in the language of the GLSL. <BR><A>Viewer</A> - id 
type.</A> 
<HR>
<A name=ViewerIsOpenGLExtensionSupported></A>
<H1 class=name>ViewerIsOpenGLExtensionSupported </H1><A class=type>Real</A><A> 
</A><A class=function>ViewerIsOpenGLExtensionSupported =</A><A>( viewer as 
</A><A class=type>real</A><A>, ext as </A><A class=type>string</A><A> );</A> 
<BR><A class=ntext>Returns true, if the video driver supports the specified 
OpenGL extension. With this feature, you can check in advance whether the work 
on the target machine those or other functions of the Xtreme3D, and to take 
appropriate measures - for example, the withdrawal of informative error message. 
If the function is dependent on the expansion, this help stipulated in its 
description. <BR><A>Viewer</A> - view id</A> <BR><A>Ext</A> - full name (for 
example, "GL_ARB_texture_float" or "GL_NV_occlusion_query").</A> 
<HR>
</DIV></BODY></HTML>
