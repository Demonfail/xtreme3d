<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>DCE</TITLE>
<META content="text/html; charset=utf-8" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css href="../data/style.css">
<META name=GENERATOR content="MSHTML 8.00.6001.23536"></HEAD>
<BODY>
<DIV align=justify>
<H1 class=pagetitle>Dynamic Collision Engine (DCE) </H1><A class=type>Class: 
TGLDCEManager</A><BR><BR><A>DCE is a very powerful engine to detect and handle 
collisions, sufficiently flexible so that it can be used in games of any genre. 
You for this absolutely do not need to understand the features and technologies 
of collision detection - the engine is very easy to use. You only need to assign 
objects, which must face, and the rest will take care of DCE. You still enjoy 
the result! <BR>Objects in the DCE are divided into two types - dynamic and 
static. The dynamic can move in space, and this is taken into account when 
checking for collisions. It may be, for example, the character, which is 
controlled by the player. Static objects do not move and are used, for example, 
as walls, floor and ceiling, columns and other obstacles. <BR>After the seating 
facilities in the DCE, their movement cannot be controlled standard functions of 
transformation. For this purpose are used their own functions of DCE. <BR>The 
objects are facing according to the shape and size of their colliders - 
invisible geometrical bodies, they are presented in a logical DCE environment. 
In other words, face do not themselves objects, and those of the body. Often 
���������� constitute the ��������������� and scope. <BR>In the DCE also there 
is such an important concept as a layer (layer). This property distinguishes 
between freedom of interactions of objects. Faced with each other can only 
objects in the same layer. For example, if the object 1 is located on the Layer 
4, and the object 2 - on the Layer 5, the clash between them is not detected. 
<BR>By default, all objects are created at the zero layer. The objects of the 
zero layer is always faced with the objects of the other layers. <BR>The table 
shows how the collision detection for objects of different layers: <BR><BR>
<TABLE border=1 cellSpacing=0 borderColor=#000000 cellPadding=2 width="50%">
  <COLGROUP>
  <COL width=51>
  <COL width=51>
  <COL width=51>
  <COL width=51>
  <COL width=51>
  <TBODY>
  <TR>
    <TD height=16 width="20%">
      <P><BR></P></TD>
    <TD bgColor=#ff9966 width="20%">
      <P align=center><B>The Layer 0 </B></P></TD>
    <TD bgColor=#ff9966 width="20%">
      <P align=center><B>The Layer 1 </B></P></TD>
    <TD bgColor=#ff9966 width="20%">
      <P align=center><B>Layer 2 </B></P></TD>
    <TD bgColor=#ff9966 width="20%">
      <P align=center><B>Layer 3 </B></P></TD></TR>
  <TR>
    <TD bgColor=#ff9966 height=17 width="20%">
      <P align=center><B>The Layer 0 </B></P></TD>
    <TD bgColor=#3deb3d width="20%">
      <P align=center>Yes </P></TD>
    <TD bgColor=#3deb3d width="20%">
      <P align=center>Yes </P></TD>
    <TD bgColor=#3deb3d width="20%">
      <P align=center>Yes </P></TD>
    <TD bgColor=#3deb3d width="20%">
      <P align=center>Yes </P></TD></TR>
  <TR>
    <TD bgColor=#ff9966 height=17 width="20%">
      <P align=center><B>The Layer 1 </B></P></TD>
    <TD bgColor=#3deb3d width="20%">
      <P align=center>Yes </P></TD>
    <TD bgColor=#3deb3d width="20%">
      <P align=center>Yes </P></TD>
    <TD bgColor=#dc2300 width="20%">
      <P align=center>No </P></TD>
    <TD bgColor=#dc2300 width="20%">
      <P align=center>No </P></TD></TR>
  <TR>
    <TD bgColor=#ff9966 height=17 width="20%">
      <P align=center><B>Layer 2 </B></P></TD>
    <TD bgColor=#3deb3d width="20%">
      <P align=center>Yes </P></TD>
    <TD bgColor=#dc2300 width="20%">
      <P align=center>No </P></TD>
    <TD bgColor=#3deb3d width="20%">
      <P align=center>Yes </P></TD>
    <TD bgColor=#dc2300 width="20%">
      <P align=center>No </P></TD></TR>
  <TR>
    <TD bgColor=#ff9966 height=16 width="20%">
      <P align=center><B>Layer 3 </B></P></TD>
    <TD bgColor=#3deb3d width="20%">
      <P align=center>Yes </P></TD>
    <TD bgColor=#dc2300 width="20%">
      <P align=center>No </P></TD>
    <TD bgColor=#dc2300 width="20%">
      <P align=center>No </P></TD>
    <TD bgColor=#3deb3d width="20%">
      <P align=center>Yes </P></TD></TR></TBODY></TABLE><BR>You can use layers to 
break the game space on separate areas of the objects, and thus increase 
productivity. And you can find, and other applications. <BR>Another interesting 
feature of the DCE that dynamic objects have two kinematic status - the local 
and absolute. In other words, parameters such as speed, acceleration and 
momentum can be defined as the local coordinates of an object, and in the 
global. These parameters are independent of each other, but both at the same 
time are taken into account in the calculation of the movement. Local settings 
are convenient when you manage the object which can rotate and move in the 
direction where "looks" - and this situation is observed in the absolute 
majority of the games. This absolute comfortable settings for objects of any 
external force - for example, if a character throws explosion or demolishing the 
wind (since the speed of summed up, the character will move faster, if it is in 
the wind - approximately as in real life). </A><BR>
<HR>
<A name=DceManagerCreate></A>
<H1 class=name>DceManagerCreate </H1><A class=type>Real</A><A> </A><A 
class=function>DceManagerCreate =</A><A>();</A> <BR><A>Creates a DCE manager and 
returns its id.</A> 
<HR>
<A name=DceManagerStep></A>
<H1 class=name>DceManagerStep </H1><A class=type>Real</A><A> </A><A 
class=function>DceManagerStep =</A><A>( manager,delta as </A><A 
class=type>real</A><A> );</A> <BR><A>Commits the Manual Update Manager. Is used 
only if the manual update feature is enabled </A><A class=funclink 
href="../functions/dce.htm#DceManagerSetManualStep">DceManagerSetManualStep</A><A>. 
Otherwise, the update automatically.</A> <BR><A>Manager - id of the DCE 
manager</A> <BR><A>Delta - the step size of time, usually in the range of 0.1 to 
1.</A> 
<HR>
<A name=DceManagerSetGravity></A>
<H1 class=name>DceManagerSetGravity </H1><A class=type>Real</A><A> </A><A 
class=function>DceManagerSetGravity =</A><A>( manager grav,as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the amount of gravity (the force 
of the dynamic objects will be attracted to the earth).</A> <BR><A>Manager - id 
of the DCE manager</A> <BR><A>Grav - gravity.</A> 
<HR>
<A name=DceManagerSetWorldDirection></A>
<H1 class=name>DceManagerSetWorldDirection </H1><A class=type>Real</A><A> </A><A 
class=function>DceManagerSetWorldDirection =</A><A>( manager,x,y,z as </A><A 
class=type>real</A><A> );</A> <BR><A>There are no details.</A> <BR><A>Manager - 
id of the DCE manager</A> <BR><A>X,y,z - vector.</A> 
<HR>
<A name=DceManagerSetWorldScale></A>
<H1 class=name>DceManagerSetWorldScale </H1><A class=type>Real</A><A> </A><A 
class=function>DceManagerSetWorldScale =</A><A>( manager,scale as </A><A 
class=type>real</A><A> );</A> <BR><A>There are no details.</A> <BR><A>Manager - 
id of the DCE manager</A> <BR><A>Scale is the scale.</A> 
<HR>
<A name=DceManagerSetMovementScale></A>
<H1 class=name>DceManagerSetMovementScale </H1><A class=type>Real</A><A> </A><A 
class=function>DceManagerSetMovementScale =</A><A>( manager,scale as </A><A 
class=type>real</A><A> );</A> <BR><A>There are no details.</A> <BR><A>Manager - 
id of the DCE manager</A> <BR><A>Scale is the scale.</A> 
<HR>
<A name=DceManagerSetLayers></A>
<H1 class=name>DceManagerSetLayers </H1><A class=type>Real</A><A> </A><A 
class=function>DceManagerSetLayers =</A><A>( manager ccs,as </A><A 
class=type>real</A><A> );</A> <BR><A>There are no details.</A> <BR><A 
class=constant name=ccsDCEStandard>CcsDCEStandard</A><A> = 0 - there are no 
details</A> <BR><A class=constant 
name=ccsCollisionStandard>CcsCollisionStandard</A><A> = 1 - there are no 
details</A> <BR><A class=constant name=ccsHybrid>CcsHybrid</A><A> = 2 - there 
are no details</A> <BR><A>Manager - id of the DCE manager</A> <BR><A>The CCS - 
there are no details.</A> 
<HR>
<A name=DceManagerSetManualStep></A>
<H1 class=name>DceManagerSetManualStep </H1><A class=type>Real</A><A> </A><A 
class=function>DceManagerSetManualStep =</A><A>( manager,mode as </A><A 
class=type>real</A><A> );</A> <BR><A>Enables or disables the manual update. When 
the manual updating Use The </A><A class=funclink 
href="../functions/dce.htm#DceManagerStep">DceManagerStep</A><A>.</A> 
<BR><A>Manager - id of the DCE manager</A> <BR><A>Mode - </A><A 
class=constant>true</A><A> or </A><A class=constant>false</A><A>.</A> 
<HR>
<A name=DceDynamicSetManager></A>
<H1 class=name>DceDynamicSetManager </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicSetManager =</A><A>( object,manager as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies an object in the environment, DCE 
as a dynamic, attaching it to the specified manager.</A> <BR><A>The object is 
the object id</A> <BR><A>Manager - id of the DCE manager.</A> 
<HR>
<A name=DceDynamicSetActive></A>
<H1 class=name>DceDynamicSetActive </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicSetActive =</A><A>( object,mode as </A><A 
class=type>real</A><A> );</A> <BR><A>Enables or disables dynamic object. Objects 
that are turned off are not taken into account when checking for collisions and, 
therefore, they are not squandered computing resources.</A> <BR><A>The object is 
the object id</A> <BR><A>Mode - </A><A class=constant>true</A><A> or </A><A 
class=constant>false</A><A>.</A> 
<HR>
<A name=DceDynamicIsActive></A>
<H1 class=name>DceDynamicIsActive </H1><A class=type>Boolean</A><A> = </A><A 
class=function>DceDynamicIsActive</A><A>( object as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns true if the object is turned on, 
and false if off.</A> <BR><A>The object is the object ID.</A> 
<HR>
<A name=DceDynamicSetUseGravity></A>
<H1 class=name>DceDynamicSetUseGravity </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicSetUseGravity =</A><A>( object,mode as </A><A 
class=type>real</A><A> );</A> <BR><A>Enables or disables the gravity for dynamic 
object.</A> <BR><A>The object is the object id</A> <BR><A>Mode - </A><A 
class=constant>true</A><A> or </A><A class=constant>false</A><A>.</A> 
<HR>
<A name=DceDynamicSetLayer></A>
<H1 class=name>DceDynamicSetLayer </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicSetLayer =</A><A>( object,layer as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the layer of dynamic object.</A> 
<BR><A>The object is the object id</A> <BR><A>Layer is the number layer.</A> 
<HR>
<A name=DceDynamicGetLayer></A>
<H1 class=name>DceDynamicGetLayer </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicGetLayer =</A><A>( object as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns the number of layers of dynamic 
object.</A> <BR><A>The object is the object ID.</A> 
<HR>
<A name=DceDynamicSetSolid></A>
<H1 class=name>DceDynamicSetSolid </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicSetSolid =</A><A>( object,mode as </A><A 
class=type>real</A><A> );</A> <BR><A>Enables or disables the hardness of the 
dynamic object. If the density is enabled, the object will be firm in relation 
to the other dynamic objects.</A> <BR><A>The object is the object id</A> 
<BR><A>Mode - </A><A class=constant>true</A><A> or </A><A 
class=constant>false</A><A>.</A> 
<HR>
<A name=DceDynamicSetFriction></A>
<H1 class=name>DceDynamicSetFriction </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicSetFriction =</A><A>( object,friction as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the coefficient of friction for a 
dynamic object.</A> <BR><A>The object is the object id</A> <BR><A>Friction is 
the coefficient of friction.</A> 
<HR>
<A name=DceDynamicSetBounce></A>
<H1 class=name>DceDynamicSetBounce </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicSetBounce =</A><A>( object,bounce as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the parameter of elasticity for a 
dynamic object.</A> <BR><A>The object is the object id</A> <BR><A>Bounce is a 
parameter of elasticity (the value in the range from 0 to 1).</A> 
<HR>
<A name=DceDynamicSetSize></A>
<H1 class=name>DceDynamicSetSize </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicSetSize =</A><A>( object,x,y,z as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the size of the collider dynamic 
object. Collider dynamic objects always has the form of an ellipsoid (</A><A 
class=constant>csEllipsoid</A><A>) - thus, this function sets the radii of the 
ellipsoid along three axes.</A> <BR><A>The object is the object id</A> 
<BR><A>X,y,z - the size of the collider along three axes.</A> 
<HR>
<A name=DceDynamicSetSlideOrBounce></A>
<H1 class=name>DceDynamicSetSlideOrBounce </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicSetSlideOrBounce =</A><A>( object,The csb as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the type of behavior of the 
dynamic object collisions - gliding or repulsion. Allowed values are as 
follows:</A> <BR><A class=constant name=csbSlide>CsbSlide</A><A> = 0 - 
gliding</A> <BR><A class=constant name=csbBounce>CsbBounce</A><A> = 1 - 
repulsion.</A> <BR><A>The object is the object id</A> <BR><A>The csb - gliding 
or repulsion.</A> 
<HR>
<A name=DceDynamicApplyAcceleration></A>
<H1 class=name>DceDynamicApplyAcceleration </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicApplyAcceleration =</A><A>( object,x,y,z as </A><A 
class=type>real</A><A> );</A> <BR><A>Attached to the dynamic object Local 
Acceleration (expressed in the Local coordinate system).</A> <BR><A>The object 
is the object id</A> <BR><A>X,y,z is a vector of acceleration.</A> 
<HR>
<A name=DceDynamicApplyAbsAcceleration></A>
<H1 class=name>DceDynamicApplyAbsAcceleration </H1><A class=type>Real</A><A> 
</A><A class=function>DceDynamicApplyAbsAcceleration =</A><A>( object,x,y,z as 
</A><A class=type>real</A><A> );</A> <BR><A>Attached to the dynamic object of 
absolute acceleration.</A> <BR><A>The object is the object id</A> <BR><A>X,y,z 
is a vector of acceleration.</A> 
<HR>
<A name=DceDynamicStopAcceleration></A>
<H1 class=name>DceDynamicStopAcceleration </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicStopAcceleration =</A><A>( object as </A><A 
class=type>real</A><A> );</A> <BR><A>Stops the local acceleration of dynamic 
object.</A> <BR><A>The object is the object ID.</A> 
<HR>
<A name=DceDynamicStopAbsAcceleration></A>
<H1 class=name>DceDynamicStopAbsAcceleration </H1><A class=type>Real</A><A> 
</A><A class=function>DceDynamicStopAbsAcceleration =</A><A>( object as </A><A 
class=type>real</A><A> );</A> <BR><A>Stops the absolute acceleration of dynamic 
object.</A> <BR><A>The object is the object ID.</A> 
<HR>
<A name=DceDynamicJump></A>
<H1 class=name>DceDynamicJump </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicJump =</A><A>( object,height,speed as </A><A 
class=type>real</A><A> );</A> <BR><A>Commits the jump of the dynamic object.</A> 
<BR><A>The object is the object id</A> <BR><A>Height is the maximum height of 
the jump</A> <BR><A>Speed - The speed of the jump.</A> 
<HR>
<A name=DceDynamicMove></A>
<H1 class=name>DceDynamicMove </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicMove =</A><A>( object,x,y,z,delta as </A><A 
class=type>real</A><A> );</A> <BR><A>Moves the dynamic object. Note that the 
movement of an object this function is not subject to gravity.</A> <BR><A>The 
object is the object id</A> <BR><A>X,y,z - a motion vector</A> <BR><A>Delta - 
there are no details.</A> 
<HR>
<A name=DceDynamicMoveTo></A>
<H1 class=name>DceDynamicMoveTo </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicMoveTo =</A><A>( object,x,y,z,amount as </A><A 
class=type>real</A><A> );</A> <BR><A>Moves the dynamic object in a direction to 
the point indicated.</A> <BR><A>The object is the object id</A> <BR><A>X,y,z - 
absolute coordinates of the Point</A> <BR><A>Amount - the speed of movement.</A> 

<HR>
<A name=DceDynamicSetVelocity></A>
<H1 class=name>DceDynamicSetVelocity </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicSetVelocity =</A><A>( object,x,y,z as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the local speed of dynamic object 
(expressed in the Local coordinate system).</A> <BR><A>The object is the object 
id</A> <BR><A>X,y,z is a vector of speed.</A> 
<HR>
<A name=DceDynamicGetVelocity></A>
<H1 class=name>DceDynamicGetVelocity </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicGetVelocity =</A><A>( object,ind as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns the local speed of dynamic 
object.</A> <BR><A>The object is the object id</A> <BR><A>Ind - the index of the 
coordinates (0 = X 1 = Y 2 = Z).</A> 
<HR>
<A name=DceDynamicSetAbsVelocity></A>
<H1 class=name>DceDynamicSetAbsVelocity </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicSetAbsVelocity =</A><A>( object,x,y,z as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the absolute speed of dynamic 
object (expressed in the global coordinate system).</A> <BR><A>The object is the 
object id</A> <BR><A>X,y,z is a vector of speed.</A> 
<HR>
<A name=DceDynamicGetAbsVelocity></A>
<H1 class=name>DceDynamicGetAbsVelocity </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicGetAbsVelocity =</A><A>( object,ind as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns the absolute speed of dynamic 
object.</A> <BR><A>The object is the object id</A> <BR><A>Ind - the index of the 
coordinates (0 = X 1 = Y 2 = Z).</A> 
<HR>
<A name=DceDynamicApplyImpulse></A>
<H1 class=name>DceDynamicApplyImpulse </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicApplyImpulse =</A><A>( object,x,y,z as </A><A 
class=type>real</A><A> );</A> <BR><A>Attached to the dynamic object local 
impulse (instant change in the local speed).</A> <BR><A>The object is the object 
id</A> <BR><A>X,y,z - momentum. Added to the current local speed.</A> 
<HR>
<A name=DceDynamicApplyAbsImpulse></A>
<H1 class=name>DceDynamicApplyAbsImpulse </H1><A class=type>Real</A><A> </A><A 
class=function>DceDynamicApplyAbsImpulse =</A><A>( object,x,y,z as </A><A 
class=type>real</A><A> );</A> <BR><A>Attached to the dynamic object absolute 
impulse (instant change in absolute speed).</A> <BR><A>The object is the object 
id</A> <BR><A>X,y,z - momentum. Added to the current absolute speed.</A> 
<HR>
<A name=DceDynamicInGround></A>
<H1 class=name>DceDynamicInGround </H1><A class=type>Boolean</A><A> = </A><A 
class=function>DceDynamicInGround</A><A>( object as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns true, if the dynamic object "stands 
on the Earth" - that is, is in contact with the surface underneath it.</A> 
<BR><A>The object is the object ID.</A> 
<HR>
<A name=DceDynamicSetMaxRecursionDepth></A>
<H1 class=name>DceDynamicSetMaxRecursionDepth </H1><A class=type>Real</A><A> 
</A><A class=function>DceDynamicSetMaxRecursionDepth =</A><A>( object,depth as 
</A><A class=type>real</A><A> );</A> <BR><A>There are no details.</A> <BR><A>The 
object is the object id</A> <BR><A>Depth - there are no details.</A> 
<HR>
<A name=DceStaticSetManager></A>
<H1 class=name>DceStaticSetManager </H1><A class=type>Real</A><A> </A><A 
class=function>DceStaticSetManager =</A><A>( object,manager as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies an object in the environment, DCE 
as a static, attaching it to the specified manager.</A> <BR><A>The object is the 
object id</A> <BR><A>Manager - id of the DCE manager.</A> 
<HR>
<A name=DceStaticSetActive></A>
<H1 class=name>DceStaticSetActive </H1><A class=type>Real</A><A> </A><A 
class=function>DceStaticSetActive =</A><A>( object,mode as </A><A 
class=type>real</A><A> );</A> <BR><A>Enables or disables the static object. 
Objects that are turned off are not taken into account when checking for 
collisions and, therefore, they are not squandered computing resources.</A> 
<BR><A>The object is the object id</A> <BR><A>Mode - </A><A 
class=constant>true</A><A> or </A><A class=constant>false</A><A>.</A> 
<HR>
<A name=DceStaticSetShape></A>
<H1 class=name>DceStaticSetShape </H1><A class=type>Real</A><A> </A><A 
class=function>DceStaticSetShape =</A><A>( object,cs as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the form of the collider static 
object. Allowed values are as follows:</A> <BR><A class=constant 
name=csEllipsoid>CsEllipsoid</A><A> = 0 - the ellipsoid</A> <BR><A 
class=constant name=csBox>CsBox</A><A> = 1 - the rectangular parallelepiped</A> 
<BR><A class=constant name=csFreeform>CsFreeform</A><A> = 2 - the object of free 
forms</A> <BR><A class=constant name=csTerrain>CsTerrain</A><A> = 3 - 
landscape.</A> <BR><A>The object is the object id</A> <BR><A>Cs is a form of 
collider.</A> 
<HR>
<A name=DceStaticSetLayer></A>
<H1 class=name>DceStaticSetLayer </H1><A class=type>Real</A><A> </A><A 
class=function>DceSetLayer =</A><A>( object,layer as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the layer of static object.</A> 
<BR><A>The object is the object id</A> <BR><A>Layer is the number layer.</A> 
<HR>
<A name=DceStaticSetSize></A>
<H1 class=name>DceStaticSetSize </H1><A class=type>Real</A><A> </A><A 
class=function>DceStaticSetSize =</A><A>( object,x,y,z as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the size of the collider static 
object.</A> <BR><A>The object is the object id</A> <BR><A>X,y,z - the size of 
the collider along three axes.</A> 
<HR>
<A name=DceStaticSetSolid></A>
<H1 class=name>DceStaticSetSolid </H1><A class=type>Real</A><A> </A><A 
class=function>DceStaticSetSolid =</A><A>( object,mode as </A><A 
class=type>real</A><A> );</A> <BR><A>Enables or disables the hardness of a 
static object. If the density is enabled, the object will be firm in relation to 
the dynamic objects.</A> <BR><A>The object is the object id</A> <BR><A>Mode - 
</A><A class=constant>true</A><A> or </A><A class=constant>false</A><A>.</A> 
<HR>
<A name=DceStaticSetFriction></A>
<H1 class=name>DceStaticSetFriction </H1><A class=type>Real</A><A> </A><A 
class=function>DceStaticSetFriction =</A><A>( object,friction as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the coefficient of friction for a 
static object.</A> <BR><A>The object is the object id</A> <BR><A>Friction is the 
coefficient of friction.</A> 
<HR>
<A name=DceStaticSetBounceFactor></A>
<H1 class=name>DceStaticSetBounceFactor </H1><A class=type>Real</A><A> </A><A 
class=function>DceStaticSetBounceFactor =</A><A>( object,bounce as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the parameter of elasticity for a 
static object.</A> <BR><A>The object is the object id</A> <BR><A>Bounce is a 
parameter of elasticity (the value in the range from 0 to 1).</A> 
<HR>
<!--
<A name="DceGetGravity"></A>
<H1 class=name>DceGetGravity</H1>
<A class=type>real</A><A> = </A><A class=function>DceGetGravity</A><A>( object,ind as </A><A class=type>real</A><A> );</A>
<BR><A>���������� ���������� ������������� ������� �� �������� ���.</A>
<BR><A>object - id �������</A>
<BR><A>ind - ������ ��� (0 = X, 1 = Y, 2 = Z).</A>
<HR>

<A name="DceVelocityCollided"></A>
<H1 class=name>DceVelocityCollided</H1>
<A class=type>real</A><A> = </A><A class=function>DceVelocityCollided</A><A>( object as </A><A class=type>real</A><A> );</A>
<BR><A>���������� ������, ���� ���������� ������������ ��� �������� �������.</A>
<BR><A>object - id �������.</A>
<HR>

<A name="DceGravityCollided"></A>
<H1 class=name>DceGravityCollided</H1>
<A class=type>real</A><A> = </A><A class=function>DceGravityCollided</A><A>( object as </A><A class=type>real</A><A> );</A>
<BR><A>���������� ������, ���� ���������� ������������ ��� ������� �������.</A>
<BR><A>object - id �������.</A>
<HR>

<A name="DceCountCollisions"></A>
<H1 class=name>DceCountCollisions</H1>
<A class=type>real</A><A> = </A><A class=function>DceCountCollisions</A><A>( object as </A><A class=type>real</A><A> );</A>
<BR><A>���������� ���������� ������� ������������ �������.</A>
<BR><A>object - id �������.</A>
<HR>

<A name="DceGetCollidedObject"></A>
<H1 class=name>DceGetCollidedObject</H1>
<A class=type>real</A><A> = </A><A class=function>DceGetCollidedObject</A><A>( object,col as </A><A class=type>real</A><A> );</A>
<BR><A>���������� id �������, � ������� ��������� ������������.</A>
<BR><A>object - id �������</A>
<BR><A>col - ����� ������������.</A>
<HR>

<A name="DceGetCollisionPosition"></A>
<H1 class=name>DceGetCollisionPosition</H1>
<A class=type>real</A><A> = </A><A class=function>DceGetCollisionPosition</A><A>( object,col,ind as </A><A class=type>real</A><A> );</A>
<BR><A>���������� ���������� ����� ������������.</A>
<BR><A>object - id �������</A>
<BR><A>col - ����� ������������</A>
<BR><A>ind - ������ ��� (0 = X, 1 = Y, 2 = Z).</A>
<HR>

<A name="DceGetCollisionNormal"></A>
<H1 class=name>DceGetCollisionNormal</H1>
<A class=type>real</A><A> = </A><A class=function>DceGetCollisionNormal</A><A>( object,col,ind as </A><A class=type>real</A><A> );</A>
<BR><A>���������� ������� � ����������� � ����� ������������.</A>
<BR><A>object - id �������</A>
<BR><A>col - ����� ������������</A>
<BR><A>ind - ������ ��� (0 = X, 1 = Y, 2 = Z).</A>
<HR>
--></DIV></BODY></HTML>
