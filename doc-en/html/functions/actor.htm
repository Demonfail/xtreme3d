<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Actor</TITLE>
<META content="text/html; charset=utf-8" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css href="../data/style.css">
<META name=GENERATOR content="MSHTML 8.00.6001.23536"></HEAD>
<BODY>
<DIV align=justify>
<H1 class=pagetitle>Actor </H1><A class=type>Class: TGLActor</A><BR><BR><A>Actor 
(actor) - an animated object loaded from an external file. Formats supported are 
MD2 (Quake 2), MD3 (Quake 3), the MD5 (Doom 3), SMD (Half-Life), MDC (Return to 
Castle Wolfenstein). <BR>There are two types of animation - ���������� and 
skeletal. In the case of ���������� animation, in the memory of the stored 
separate models for each of the key frame. Top polygon mesh simply interpolated 
from one position to another. <BR>Skeletal animation implies that there is only 
one model in the neutral posture and a set of matrices that transform parts of 
this model. These matrices conditionally called bones. In other words, the model 
of the integrated "skeleton" of these bones - when the individual bones, rotates 
and the corresponding part of the body. <BR>
<HR>
<A name=ActorCreate></A>
<H1 class=name>ActorCreate </H1><A class=type>Real</A><A> </A><A 
class=function>ActorCreate =</A><A>( filename as </A><A 
class=type>string</A><A>, The matlib,parent as </A><A class=type>real</A> );</A> 
<BR><A>Creates a new actor and returns its id.</A> <BR><A>Fname is the path to 
the model of</A> <BR><A>Matlib - library materials, which should be used for the 
storage of materials models</A> <BR><A>Parent - the parent id for the actor (0 - 
lack of parents).</A> 
<HR>
<A name=ActorCopy></A>
<H1 class=name>ActorCopy </H1><A class=type>Real</A><A> </A><A 
class=function>ActorCopy =</A><A>( actor,parent as </A><A class=type>real</A> 
);</A> <BR><A>Creates a copy of an existing actor and returns its id.</A> 
<BR><A>Actor - id of the actor</A> <BR><A>Parent - the parent id for a copy (0 - 
lack of parents).</A> 
<HR>
<A name=ActorSetAnimationRange></A>
<H1 class=name>ActorSetAnimationRange </H1><A class=type>Real</A><A> </A><A 
class=function>ActorSetAnimationRange =</A><A>( actor,start,end as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the start and end frame of the 
animation.</A> <BR><A>Actor - id of the actor</A> <BR><A>Start,end - the start 
and end frame. The count rate starts with zero.</A> 
<HR>
<A name=ActorGetCurrentFrame></A>
<H1 class=name>ActorGetCurrentFrame </H1><A class=type>Real</A><A> </A><A 
class=function>ActorGetCurrentFrame =</A><A>( actor as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns the current frame animation.</A> 
<BR><A>Actor - id of the actor</A> 
<HR>
<A name=ActorSwitchToAnimation></A>
<H1 class=name>ActorSwitchToAnimation </H1><A class=type>Real</A><A> </A><A 
class=function>ActorSwitchToAnimation =</A><A>( actor,anim,smooth as </A><A 
class=type>real</A><A> );</A> <BR><A>Makes the transition to the target 
animation sequence.</A> <BR><A>Actor - id of the actor</A> <BR><A>Anim - the 
number of the animation</A> <BR><A>Smooth - smooth or abrupt transition: </A><A 
class=constant>true</A><A> or </A><A class=constant>false</A><A> (1 and 0, 
respectively).</A> 
<HR>
<A name=ActorSwitchToAnimationName></A>
<H1 class=name>ActorSwitchToAnimationName </H1><A class=type>Real</A><A> </A><A 
class=function>ActorSwitchToAnimationName =</A><A>( actor as </A><A 
class=type>real</A><A>, anim as </A><A class=type>string</A><A>, smooth as 
</A><A class=type>real</A><A> );</A> <BR><A>Makes the transition to the target 
animation sequences, defined by the name.</A> <BR><A>Actor - id of the actor</A> 
<BR><A>Anim is the name of the animation</A> <BR><A>Smooth - smooth or abrupt 
transition: </A><A class=constant>true</A><A> or </A><A 
class=constant>false</A><A> (1 and 0, respectively).</A> 
<HR>
<A name=ActorSynchronize></A>
<H1 class=name>ActorSynchronize </H1><A class=type>Real</A><A> </A><A 
class=function>ActorSynchronize =</A><A>( actor1,actor2 as </A><A 
class=type>real</A><A> );</A> <BR><A>Synchronizes Animations 1 actor with actor 
2.</A> <BR><A>Actor1 - actor id 1</A> <BR><A>Actor2 - actor id 2.</A> 
<HR>
<A name=ActorSetInterval></A>
<H1 class=name>ActorSetInterval </H1><A class=type>Real</A><A> </A><A 
class=function>ActorSetInterval =</A><A>( actor,interval as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the time interval interpolation 
between two frames. The higher this value - the slower the animation.</A> 
<BR><A>Actor - id of the actor</A> <BR><A>Interval (in milliseconds).</A> 
<HR>
<A name=ActorSetAnimationMode></A>
<H1 class=name>ActorSetAnimationMode </H1><A class=type>Real</A><A> </A><A 
class=function>ActorSetAnimationMode =</A><A>( actor,aam as </A><A 
class=type>real</A><A> );</A> <BR><A>Sets the playback of animation.</A> 
<BR><A>Actor - id of the actor</A> <BR><A>Aam - animation mode. You have the 
following options: aam</A> <BR><A class=constant name=aamNone>AamNone</A><A> = 0 
- Animation cannot be reproduced;</A> <BR><A class=constant 
name=aamPlayOnce>AamPlayOnce</A><A> = 1 - Animation is reproduced once and stops 
when it reaches the end frame;</A> <BR><A class=constant 
name=aamLoop>AamLoop</A><A> = 2 - is repeated cyclically (default);</A> <BR><A 
class=constant name=aamBounceForward>AamBounceForward</A><A> = 3 - is repeated 
cyclically forward until the final frame, and then in the opposite direction to 
the initial frame, then again forward, and so on.</A> <BR><A class=constant 
name=aamBounceBackward>AamBounceBackward</A><A> = 4 is the same, but in the 
opposite direction.</A> <BR><A class=constant 
name=aamLoopBackward>AamLoopBackward</A><A> = 5 is repeated cyclically in the 
opposite direction.</A> 
<HR>
<A name=ActorSetFrameInterpolation></A>
<H1 class=name>ActorSetFrameInterpolation </H1><A class=type>Real</A><A> </A><A 
class=function>ActorSetFrameInterpolation =</A><A>( actor,mode as </A><A 
class=type>real</A><A> );</A> <BR><A>Enables or disables the linear 
interpolation between frames. When the interpolation will be a sharp change of 
frames.</A> <BR><A>Actor - id of the actor</A> <BR><A>Mode - </A><A 
class=constant>true</A><A> or </A><A class=constant>false</A><A> (1 and 0, 
respectively).</A> 
<HR>
<A name=ActorAddObject></A>
<H1 class=name>ActorAddObject </H1><A class=type>Real</A><A> </A><A 
class=function>ActorAddObject =</A><A>( actor as </A><A class=type>real</A><A>as 
filename as </A><A class=type>string</A><A> );</A> <BR><A>The peculiarity of the 
models of SMD format - separate storage models and animations of the skeleton. 
This function adds the actor a new animation sequence from the SMD file and 
assigns a sequence number. The count is 1.</A> <BR><A>Actor - id of the 
actor</A> <BR><A>Fname is the path to the *.smd with animation.</A> 
<HR>
<A name=ActorGetCurrentAnimation></A>
<H1 class=name>ActorGetCurrentAnimation </H1><A class=type>String,real</A><A> 
</A><A class=function>ActorGetCurrentAnimation =</A><A>( actor as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns the current animation sequence. For 
SMD format this will be the path animation without extension, for example 
'models/animation1'. For MD2 and MD3 function returns the sequence number of the 
animation.</A> <BR><A>Actor - id of the actor</A> 
<HR>
<A name=ActorGetFrameCount></A>
<H1 class=name>ActorGetFrameCount </H1><A class=type>Real</A><A> </A><A 
class=function>ActorGetFrameCount =</A><A>( actor as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns the total number of frames of the 
animation.</A> <BR><A>Actor - id of the actor</A> 
<HR>
<A name=ActorGetBoneCount></A>
<H1 class=name>ActorGetBoneCount </H1><A class=type>Real</A><A> </A><A 
class=function>ActorGetBoneCount =</A><A>( actor as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns the total number of bones in the 
skeleton of the actor.</A> <BR><A>Actor - id of the actor</A> 
<HR>
<A name=ActorGetBoneByName></A>
<H1 class=name>ActorGetBoneByName </H1><A class=type>Real</A><A> </A><A 
class=function>ActorGetBoneByName =</A><A>( actor as </A><A 
class=type>real</A><A>, bonename as </A><A class=type>string</A><A> );</A> 
<BR><A>Returns the index of the bones with the specified name.</A> <BR><A>Actor 
- id of the actor</A> <BR><A>Bonename - the name of the bones.</A> 
<HR>
<A name=ActorRotateBone></A>
<H1 class=name>ActorRotateBone </H1><A class=type>Real</A><A> </A><A 
class=function>ActorRotateBone =</A><A>( actor,boneindex,x,y,z as </A><A 
class=type>real</A><A> );</A> <BR><A>Turns the bone.</A> <BR><A>Actor - id of 
the actor</A> <BR><A>Boneindex - the index of the Bone</A> <BR><A>X,y,z - Angle 
of rotation on three axes.</A> 
<HR>
<A name=ActorGetBoneRotation></A>
<H1 class=name>ActorGetBoneRotation </H1><A class=type>Real</A><A> </A><A 
class=function>ActorGetBoneRotation =</A><A>( actor,boneindex,index as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns the local rotation angle of the 
bones to the fixed axis.</A> <BR><A>Actor - id of the actor</A> <BR><A>Boneindex 
- the index of the Bone</A> <BR><A>Index - the x, y, or z axis (0, 1, and 2, 
respectively).</A> 
<HR>
<A name=ActorMoveBone></A>
<H1 class=name>ActorMoveBone </H1><A class=type>Real</A><A> </A><A 
class=function>ActorMoveBone =</A><A>( actor,boneindex,x,y,z as </A><A 
class=type>real</A><A> );</A> <BR><A>Moves the bone.</A> <BR><A>Actor - id of 
the actor</A> <BR><A>Boneindex - the index of the Bone</A> <BR><A>X,y,z 
coordinates of offset along three axes.</A> 
<HR>
<A name=ActorGetBonePosition></A>
<H1 class=name>ActorGetBonePosition </H1><A class=type>Real</A><A> </A><A 
class=function>ActorGetBonePosition =</A><A>( actor,boneindex,index as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns the offset of the local bones to 
the fixed axis.</A> <BR><A>Actor - id of the actor</A> <BR><A>Boneindex - the 
index of the Bone</A> <BR><A>Index - the x, y, or z axis (0, 1, and 2, 
respectively).</A> 
<HR>
<A name=ActorShowSkeleton></A>
<H1 class=name>ActorShowSkeleton </H1><A class=type>Real</A><A> </A><A 
class=function>ActorShowSkeleton =</A><A>( actor,mode as </A><A 
class=type>real</A><A> );</A> <BR><A>Enables or disables the schematic display 
of the skeleton.</A> <BR><A>Actor - id of the actor</A> <BR><A>Mode - </A><A 
class=constant>true</A><A> or </A><A class=constant>false</A><A> (1 and 0, 
respectively).</A> 
<HR>
<A name=ActorBoneExportMatrix></A>
<H1 class=name>ActorBoneExportMatrix </H1><A class=type>Real</A><A> </A><A 
class=function>ActorBoneExportMatrix =</A><A>( actor,boneindex,object as </A><A 
class=type>real</A><A> );</A> <BR><A>Copies the transformation matrix of bones 
in the local transformation matrix of the specified object - in other words, 
secures the object to the bone. �������� matrix on the actor, therefore, for the 
full attachment of property need to make child in relation to the actor. This 
feature is indispensable when you need to, for example, give into the hands of 
the hero of the weapons or to put on the armor.</A> <BR><A>Actor - id of the 
actor</A> <BR><A>Boneindex - the index of the Bone</A> <BR><A>The object is the 
object ID.</A> 
<HR>
<A name=ActorMakeSkeletalTranslationStatic></A>
<H1 class=name>ActorMakeSkeletalTranslationStatic </H1><A class=type>Real</A><A> 
</A><A class=function>ActorMakeSkeletalTranslationStatic =</A><A>( actor,anim as 
</A><A class=type>real</A><A> );</A> <BR><A>Some models of SMD contain the 
offset of the skeleton in the animation walk - This feature eliminates this 
bias.</A> <BR><A>Actor - id of the actor</A> <BR><A>Anim - the number of the 
animation.</A> 
<HR>
<A name=ActorMakeSkeletalRotationDelta></A>
<H1 class=name>ActorMakeSkeletalRotationDelta </H1><A class=type>Real</A><A> 
</A><A class=function>ActorMakeSkeletalRotationDelta =</A><A>( actor,anim as 
</A><A class=type>real</A><A> );</A> <BR><A>There are no details.</A> 
<BR><A>Actor - id of the actor</A> <BR><A>Anim - the number of the 
animation.</A> 
<HR>
<A name=AnimationBlenderCreate></A>
<H1 class=name>AnimationBlenderCreate </H1><A class=type>Real</A><A> </A><A 
class=function>AnimationBlenderCreate =</A><A>( );</A> <BR><A>Creates The 
����������� animation - the object, which you can apply additional animations to 
the actor.</A> 
<HR>
<A name=AnimationBlenderSetActor></A>
<H1 class=name>AnimationBlenderSetActor </H1><A class=type>Real</A><A> </A><A 
class=function>AnimationBlenderSetActor =</A><A>( animblender,actor as </A><A 
class=type>real</A><A> );</A> <BR><A>Applies The ����������� animations to the 
actor.</A> <BR><A>Animblender - id ����������� animations</A> <BR><A>Actor - id 
of the actor.</A> 
<HR>
<A name=AnimationBlenderSetAnimation></A>
<H1 class=name>AnimationBlenderSetAnimation </H1><A class=type>Real</A><A> 
</A><A class=function>AnimationBlenderSetAnimation =</A><A>( animblender as 
</A><A class=type>real</A><A>, animname as </A><A class=type>string</A><A> 
);</A> <BR><A>Specifies the animation, you need to mix with the main �������� 
actor.</A> <BR><A>Animblender - id ����������� animations</A> <BR><A>Animname - 
the name of the animation.</A> 
<HR>
<A name=AnimationBlenderSetRatio></A>
<H1 class=name>AnimationBlenderSetRatio </H1><A class=type>Real</A><A> </A><A 
class=function>AnimationBlenderSetRatio =</A><A>( animblender,ratio as </A><A 
class=type>real</A><A> );</A> <BR><A>Sets the staffing position ����������� 
animation in the form of values from 0 to 1 (0 is the first frame, 1 is the last 
frame). Thus, the main and additional animations can be sync in time, and you 
can control their speed separately.</A> <BR><A>Animblender - id ����������� 
animations</A> <BR><A>Ratio - hr position.</A> 
<HR>
<A name=ActorLoadQ3TagList></A>
<H1 class=name>ActorLoadQ3TagList </H1><A class=type>Real</A><A> = </A><A 
class=function>ActorLoadQ3TagList</A><A>( filename as </A><A 
class=type>string</A><A> );</A> <BR><A>Downloads a list of animated tags from 
File MD3 and returns its id. Tags - this is the format of the MD3: they are used 
to attach objects to different parts of the model and synchronize them with the 
topmost animation.</A> <BR><A>Filename is the name of the File MD3.</A> 
<HR>
<A name=ActorQ3TagExportMatrix></A>
<H1 class=name>ActorQ3TagExportMatrix </H1><A class=type>Real</A><A> = </A><A 
class=function>ActorQ3TagExportMatrix</A><A>( actor,taglist as </A><A 
class=type>real</A><A>, tagname as </A><A class=type>string</A><A>, the object 
as </A><A class=type>real</A><A> );</A> <BR><A>Copies the transformation matrix 
animation tags MD3 in the matrix transformation of the object - that is, secures 
the object to this mark.</A> <BR><A>Actor - id of the actor</A> <BR><A>Taglist - 
id a list of Labels</A> <BR><A>Tagname is the name of the Mark</A> <BR><A>The 
object is the object ID.</A> 
<HR>
<A name=ActorLoadQ3Animations></A>
<H1 class=name>ActorLoadQ3Animations </H1><A class=type>Real</A><A> = </A><A 
class=function>ActorLoadQ3Animations</A><A>( actor as </A><A 
class=type>real</A><A>as filename,classname as </A><A class=type>string</A><A> 
);</A> <BR><A>Loads the animation sequence of MD3 file from the CFG file.</A> 
<BR><A>Actor - id of the actor</A> <BR><A>Filename is the name of the file 
CFG</A> <BR><A>Classname - the name of the class animation sequence.</A> 
<HR>
<A name=ActorMeshObjectsCount></A>
<H1 class=name>ActorMeshObjectsCount </H1><A class=type>Real</A><A> </A><A 
class=function>ActorMeshObjectsCount =</A><A>( actor as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns the number of ����� in the model of 
the actor.</A> <BR><A>Actor - id of the actor.</A> 
<HR>
<A name=ActorMeshSetVisible></A>
<H1 class=name>ActorMeshSetVisible </H1><A class=type>Real</A><A> </A><A 
class=function>ActorMeshSetVisible =</A><A>( actor,mesh,mode as </A><A 
class=type>real</A><A> );</A> <BR><A>Enables or disables the display of the ���� 
actor.</A> <BR><A>Actor - id of the actor</A> <BR><A>Mesh - the index of 
����</A> <BR><A>Mode - </A><A class=constant>true</A><A> or </A><A 
class=constant>false</A><A> (1 and 0, respectively).</A> 
<HR>
<A name=ActorFaceGroupsCount></A>
<H1 class=name>ActorFaceGroupsCount </H1><A class=type>Real</A><A> </A><A 
class=function>ActorFaceGroupsCount =</A><A>( actor,mesh as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns the number of ��������� in the 
specified ���� actor.</A> <BR><A>Actor - id of the actor</A> <BR><A>Mesh - the 
index of ����.</A> 
<HR>
<A name=ActorFaceGroupGetMaterialName></A>
<H1 class=name>ActorFaceGroupGetMaterialName </H1><A class=type>Real</A><A> 
</A><A class=function>ActorFaceGroupGetMaterialName =</A><A>( actor,mesh,fgroup 
as </A><A class=type>real</A><A> );</A> <BR><A>Returns the name of the material 
given ���������� ����.</A> <BR><A>Actor - id of the actor</A> <BR><A>Mesh - the 
index of ����</A> <BR><A>Fgroup - index ����������.</A> 
<HR>
<A name=ActorFaceGroupSetMaterial></A>
<H1 class=name>ActorFaceGroupSetMaterial </H1><A class=type>Real</A><A> </A><A 
class=function>ActorFaceGroupSetMaterial =</A><A>( actor,mesh,fgroup as </A><A 
class=type>real</A><A>, material as </A><A class=type>real</A><A> );</A> 
<BR><A>Specifies the material ���������� ����. The material must be present in 
the library materials, specified when creating the actor.</A> <BR><A>Actor - id 
of the actor</A> <BR><A>Mesh - the index of ����</A> <BR><A>Fgroup - Index 
����������</A> <BR><A>The material is the name of the material.</A> 
<HR>
</DIV></BODY></HTML>
