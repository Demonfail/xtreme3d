<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Partition</TITLE>
<META content="text/html; charset=utf-8" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css href="../data/style.css">
<META name=GENERATOR content="MSHTML 8.00.6001.23536"></HEAD>
<BODY>
<DIV align=justify>
<H1 class=pagetitle>Partition </H1><A class=type>Class: TQuadtreeSpacePartition, 
TOctreeSpacePartition</A><BR><BR><A>The more you add to the scene objects, the 
slower the flows of their processing and rendering. In such situations, the 
drawing is sent too much data on the tops, including those that are drawn and 
should not - the camera simply does not see. What do you do? Come to the aid of 
the methods of partitioning of space. In particular, the quadratic and �������� 
trees: The Quadtree and Octree. <BR>Let's look at the principle of The Octree. 
The game world fits into the cube, the resulting cube is divided in two on each 
axis (X,Y,Z). Thus, it appears that the world is divided into eight cubes (hence 
the name of The Octree - ������������ tree). These eight cubes are divided into 
another eight, those for another eight and so on. <BR>The biggest cube - 
Original - is called a root (root). All of the Cuba of the tree, including the 
root is the nodes (node). Nodes that are at the very bottom of the wood and 
storing objects - leaves (leaf). <BR>When the scene is divided into �������� 
number of nodes, and each sheet contains the lists of objects, we use the 
pyramid visibility (frustum), determine from all the sheets of those that are 
visible to the camera. And identifying them, draw only those objects that are in 
cubes of these leaves. <BR><BR><IMG align=center src="../data/octree.jpg"> 
<BR><BR>Quadratic tree (Quadtree) is arranged in the same way, only peace is 
divided not in Cuba, and the squares. Quadtree is more suitable for segmenting 
the flat spaces, in which the camera movement is limited mainly some plane: An 
example may be a �������������. <BR>Trees can be applied not only to the 
selection of the visibility, but also for the optimization of test collisions. 
For example, you can define the sheets inside the kind of limiting the 
parallelepiped (AABB) or the scope (BSphere). </A><BR>
<HR>

<H1 class=name>OctreeCreate </H1><A class=type>Real</A><A> = </A><A 
class=function>OctreeCreate</A><A>maxdepth(,leafthreshold,growgravy,culling as 
</A><A class=type>real</A><A> );</A> <BR><A>Creates The �������� tree and 
returns its id.</A> <BR><A>Maxdepth - </A><BR><A>Leafthreshold - 
</A><BR><A>Growgravy - </A><BR><A>Culling - </A><A class=constant 
name=cmFineCulling>cmFineCulling</A><A>=0 or </A><A class=constant 
name=cmGrossCulling>cmGrossCulling</A><A>=1.</A> 
<HR>

<H1 class=name>QuadtreeCreate </H1><A class=type>Real</A><A> = </A><A 
class=function>QuadtreeCreate</A><A>maxdepth(,leafthreshold,growgravy,culling as 
</A><A class=type>real</A><A> );</A> <BR><A>Creates a quadratic tree and returns 
its id.</A> <BR><A>Maxdepth - </A><BR><A>Leafthreshold - </A><BR><A>Growgravy - 
</A><BR><A>Culling - </A><A class=constant>cmFineCulling</A><A>=0 or </A><A 
class=constant>cmGrossCulling</A><A>=1.</A> 
<HR>

<H1 class=name>PartitionDestroy </H1><A class=type>Real</A><A> </A><A 
class=function>PartitionDestroy =</A><A>( tree as </A><A class=type>real</A><A> 
);</A> <BR><A>Destroys the tree.</A> <BR><A>Tree is the id of the tree.</A> 
<HR>

<H1 class=name>PartitionAddLeaf </H1><A class=type>Real</A><A> </A><A 
class=function>PartitionAddLeaf =</A><A>( tree,object as </A><A 
class=type>real</A><A> );</A> <BR><A>Adds to the tree object that should 
participate in the partitioning. <BR><A>Tree - the tree id</A> <BR><A>The object 
is the object ID.</A> 
<HR>

<H1 class=name>PartitionLeafChanged </H1><A class=type>Real</A><A> </A><A 
class=function>PartitionLeafChanged =</A><A>( object as </A><A 
class=type>real</A><A> );</A> <BR><A>There are no details.</A> <BR><A>The object 
is the object ID.</A> 
<HR>

<H1 class=name>PartitionQueryFrustrum </H1><A class=type>Real</A><A> </A><A 
class=function>PartitionQueryFrustrum =</A><A>( tree,viewer as </A><A 
class=type>real</A><A> );</A> <BR><A>Requests from the tree of all the leaves 
that are visible chamber of the specified type.</A> <BR><A>Tree - the tree 
id</A> <BR><A>Viewer - id type.</A> 
<HR>

<H1 class=name>PartitionQueryLeaf </H1><A class=type>Real</A><A> </A><A 
class=function>PartitionQueryLeaf =</A><A>( tree,object as </A><A 
class=type>real</A><A> );</A> <BR><A>There are no details.</A> <BR><A>Tree - the 
tree id</A> <BR><A>The object is the object ID.</A> 
<HR>

<H1 class=name>PartitionQueryAABB </H1><A class=type>Real</A><A> </A><A 
class=function>PartitionQueryAABB =</A><A>( tree,object as </A><A 
class=type>real</A><A> );</A> <BR><A>Requests from the tree of all the leaves 
inside the restricts the parallelepiped specified object.</A> <BR><A>Tree - the 
tree id</A> <BR><A>The object is the object ID.</A> 
<HR>

<H1 class=name>PartitionQueryBSphere </H1><A class=type>Real</A><A> </A><A 
class=function>PartitionQueryBSphere =</A><A>( tree,object as </A><A 
class=type>real</A><A> );</A> <BR><A>Requests from the tree of all the leaves 
inside the limiting the scope of the specified object.</A> <BR><A>Tree - the 
tree id</A> <BR><A>The object is the object ID.</A> 
<HR>

<H1 class=name>PartitionGetNodeTests </H1><A class=type>Real</A><A> </A><A 
class=function>PartitionGetNodeTests =</A><A>( tree as </A><A 
class=type>real</A><A> );</A> <BR><A>There are no details.</A> <BR><A>Tree is 
the id of the tree.</A> 
<HR>

<H1 class=name>PartitionGetNodeCount </H1><A class=type>Real</A><A> </A><A 
class=function>PartitionGetNodeCount =</A><A>( tree as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns the total number of nodes of the 
tree.</A> <BR><A>Tree is the id of the tree.</A> 
<HR>

<H1 class=name>PartitionGetResult </H1><A class=type>Real</A><A> </A><A 
class=function>PartitionGetResult =</A><A>( tree,index as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns the id of object, belonging to the 
specified result sheet the last request.</A> <BR><A>Tree - the tree id</A> 
<BR><A>Index - the number of the sheet.</A> 
<HR>

<H1 class=name>PartitionGetResultCount </H1><A class=type>Real</A><A> </A><A 
class=function>PartitionGetResultCount =</A><A>( tree as </A><A 
class=type>real</A><A> );</A> <BR><A>Returns the number of leaves as a result of 
the last query.</A> <BR><A>Tree - the tree id</A> <BR><A>Index - the number of 
the sheet.</A> 
<HR>

<H1 class=name>PartitionResultShow </H1><A class=type>Real</A><A> </A><A 
class=function>PartitionResultShow =</A><A>( tree as </A><A 
class=type>real</A><A> );</A> <BR><A>Displays objects belonging to the leaves of 
the result of the last request.</A> <BR><A>Tree is the id of the tree.</A> 
<HR>

<H1 class=name>PartitionResultHide </H1><A class=type>Real</A><A> </A><A 
class=function>PartitionResultHide =</A><A>( tree as </A><A 
class=type>real</A><A> );</A> <BR><A>Hides objects belonging to the leaves of 
the result of the last request.</A> <BR><A>Tree is the id of the tree.</A> 
<HR>
</DIV></BODY></HTML>
