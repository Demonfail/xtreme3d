<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>ShadowMap</TITLE>
<META content="text/html; charset=utf-8" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css href="../data/style.css">
<META name=GENERATOR content="MSHTML 8.00.6001.23536"></HEAD>
<BODY>
<DIV align=justify>
<H1 class=pagetitle>ShadowMap </H1><A class=type>Class: 
TGLShadowMap</A><BR><BR><A>On modern graphics cards have the ability to render 
dynamic shadows by the method of shadow maps (shadow mapping). It only works 
with light. The basis of this method based on the idea that the lit terms are 
those terms that are visible from the light source. "Appearance" in this case 
means that this point has successfully passes the test depth when rendering from 
the light source. Thus, the shadow mapping works in two passes: first is the 
rendering of the source of light - the depth values are recorded in a special 
buffer. And then done the normal rendering, during which the buffer is used to 
check if a pixel in the shade (this test is carried out in the GLSL 
�����������-�������). <BR>Shadow maps are very effective - they are much faster 
than the ShadowVolume. But they have a disadvantage - sampling artifacts: In 
other words, if you do not use a giant depth buffer, the shadows are much 
�����������������. However, this effect can be reduced if the ���������� ������� 
filter the sample from the buffer depth of the core 3x3 or 4x4 - as a result of 
which are soft shadows without The ������������. This extension method of the 
shadow maps has received the name of the PCF (Percentage Closer Filtering). 
<BR>Shadow maps are also suffer from a number of other artifacts, known as the 
shadow of acne and peter panning, but with them just to fight. Shadow acne is a 
characteristic �������� pattern which occurs on some sides of the receiving 
shadows, when the depth on the map coincide with the values of the depth of the 
facets. With this effect usually ������� using a small shadow offset coordinates 
along the Z axis. But too much offset can lead to the effect that in honor of 
the Peter Pan - the shadow can "come loose" from the brink, and would seem to be 
that the object to float in the air. <BR><BR>It should be remembered that the 
shadow map has limited coverage area, which depends on the size of the 
projection. The more a projection, the more objects around a light source will 
drop shadow, but at the same time will increase ������������ shadows. In order 
to cover the shadows of the large territory, using the method of cascading 
shadow maps (Cascaded Shadow Maps, CSM). When using the CSM ���������� multiple 
shadow maps instead of one, with different sizes of projection, and then the 
sample of them ��������������� depending on the coordinates of the current 
pixel. As a result of the coverage of scenes of shadows rises at times: are 
qualitative shadows in the vicinity of the camera and ����������������� - away. 
<BR>Xtreme3D does not include built-in support for the CSM, but it is easy to 
realize yourself, creating several objects of ShadowMap with different sizes of 
projection. <BR><BR>Shadow cards require support OpenGL 1.4 or above, as well as 
expansion of the GL_ARB_framebuffer_object. For rendering of shadows on objects 
needs the support of the GLSL. <BR><BR>When working with shadow maps, it is 
important to know some of the principles in their work. The most important 
concept - this space to amputation of the clip (space). In this case, it 
represents a rectangular tube, the limited size of the orthogonal projection, as 
well as the near and far clipping planes. Figuratively speaking, through this 
tube light source "sees" luminous point. And it is in this space is checking, 
visible whether a pixel - if it is superseded by the closer to the light source 
pixel, this means that it is in the shade. To carry out this test, you ��������� 
������� convert coordinates of the vertices in the space of the amputation of a 
light source - this is a special matrix which Xtreme3D calculates for you. It 
remains only to shader </A><A class=funclink 
href="../functions/shader.htm#GLSLShaderSetParameterShadowMatrix">GLSLShaderSetParameterShadowMatrix 
function</A><A>. The very same depth buffer is transferred to The </A><A 
class=funclink 
href="../functions/shader.htm#GLSLShaderSetParameterShadowTexture">GLSLShaderSetParameterShadowTexture</A><A>. 
<BR><BR>You do not need to write your own the GLSL shader for drawing shadows - 
Xtreme3D has a built-in terrain shader (BumpShader), which supports the shade. 
Just tell him the shadow map </A><A class=funclink 
href="../functions/shader.htm#BumpShaderSetShadowMap">BumpShaderSetShadowMap 
function</A><A> and enjoy the result!</A><A> </A>
<HR>
<A name=ShadowMapCreate></A>
<H1 class=name>ShadowMapCreate </H1><A class=type>Real</A><A> </A><A 
class=function>ShadowMapCreate =</A><A>( res,viewer,caster as </A><A 
class=type>real</A><A> );</A> <BR><A>Creates a shadow card and returns its 
id.</A> <BR><A>Res - the Z-buffer shadow maps. Commonly used degree of Deuce: 
256, 512, 1024</A> <BR><A>Viewer - view, which is used for rendering the shadow 
map. This setting is, in fact, only for the access to the context of the OpenGL, 
which corresponds to the mind</A> <BR><A>Caster - the object, which should drop 
shadow. A recursively also takes into account the and all descendants of this 
object.</A> 
<HR>
<A name=ShadowMapSetCamera></A>
<H1 class=name>ShadowMapSetCamera </H1><A class=type>Real</A><A> </A><A 
class=function>ShadowMapSetCamera =</A><A>( shadowmap camera,as </A><A 
class=type>real</A><A> );</A> <BR><A>The camera sets the shadow map. This camera 
is used for rendering of shadows - where the camera looks to the side and 
directed the light rays. All of the other camera properties are ignored.</A> 
<BR><A>Shadowmap - id of the shadow maps</A> <BR><A>Camera - id of the 
camera.</A> 
<HR>
<A name=ShadowMapSetCaster></A>
<H1 class=name>ShadowMapSetCaster </H1><A class=type>Real</A><A> </A><A 
class=function>ShadowMapSetCaster =</A><A>( shadowmap,caster as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the object, which should drop 
shadow.</A> <BR><A>Shadowmap - id of the shadow maps</A> <BR><A>Caster is the id 
of the object.</A> 
<HR>
<A name=ShadowMapSetProjectionSize></A>
<H1 class=name>ShadowMapSetProjectionSize </H1><A class=type>Real</A><A> </A><A 
class=function>ShadowMapSetProjectionSize =</A><A>( shadowmap,size as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the ���������� orthogonal 
projection, which is used for the rendering of shadows. This setting affects the 
area, which was covered by the shadow map - all objects outside of this area 
will not drop shadow. The center of the projection corresponds to the position 
of the camera that is set by the function of the </A><A class=funclink 
href="../functions/shadowmap.htm#ShadowMapSetCamera">ShadowMapSetCamera</A><A>. 
If your game character moves in a wide space, it is necessary to move the camera 
together with a character that it was impossible to walk to the edge of the 
shadow map.</A> <BR><A>Shadowmap - id of the shadow maps</A> <BR><A>Size - 
���������� projection. Low values will lead to a small scope of shadow maps, too 
high - a marked reduction of shadow detail. The default value is 20.</A> 
<HR>
<A name=ShadowMapSetZScale></A>
<H1 class=name>ShadowMapSetZScale </H1><A class=type>Real</A><A> </A><A 
class=function>ShadowMapSetZScale =</A><A>( shadowmap,zscale as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the scale factor of the shadow 
array in the Z axis in the space of amputation. Adjusting this setting, you can 
reduce the artifacts, caused by the lack of precision Z-buffer - the shadow of 
acne and peter panning.</A> <BR><A>Shadowmap - id of the shadow maps</A> 
<BR><A>Zscale - the zoom factor. The default value is 1.</A> 
<HR>
<A name=ShadowMapSetZClippingPlanes></A>
<H1 class=name>ShadowMapSetZClippingPlanes </H1><A class=type>Real</A><A> </A><A 
class=function>ShadowMapSetZClippingPlanes =</A><A>( shadowmap,znear and zfar as 
</A><A class=type>real</A><A> );</A> <BR><A>Specifies the near and far clipping 
plane. All that is not within this range in the space of amputation of the 
shadow buffer, will not drop shadow.</A> <BR><A>Shadowmap - id of the shadow 
maps</A> <BR><A>Znear - the distance to the near clipping plane (negative 
values). The default value is 0</A> <BR><A>Znear - the distance to the far 
clipping plane. The default value is 100.</A> 
<HR>
<A name=ShadowMapSetFBO></A>
<H1 class=name>ShadowMapSetFBO </H1><A class=type>Real</A><A> </A><A 
class=function>ShadowMapSetFBO =</A><A>( shadowmap fbo,as </A><A 
class=type>real</A><A> );</A> <BR><A>Specifies the ������������� object (FBO) 
for the rendering of shadows. By default, the shadow map renders in its own 
internal buffer, but in some cases you may need external - for example, for the 
implementation of the shadows by the method of the VSM. Please note that before 
rendering the buffer is cleared in white color.</A> <BR><A>Shadowmap - id of the 
shadow maps</A> <BR><A>Fbo - id FBO.</A> 
<HR>
<A name=ShadowMapRender></A>
<H1 class=name>ShadowMapRender </H1><A class=type>Real</A><A> </A><A 
class=function>ShadowMapRender =</A><A>( shadowmap as </A><A 
class=type>real</A><A> );</A> <BR><A>Performs the rendering in the buffer of the 
shadow map.</A> <BR><A>Shadowmap - id of the shadow map.</A> 
<HR>
</DIV></BODY></HTML>
