<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>The camera from a third person</TITLE>
<META content="text/html; charset=utf-8" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css href="../data/style.css">
<META name=GENERATOR content="MSHTML 8.00.6001.23536"></HEAD>
<BODY>
<DIV align=justify>
<H1 class=pagetitle>Lesson 10 <BR>The camera from a third person 
</H1><A><B>Level:</B> medium<A> <BR><A><B>Version of the Xtreme3D:</B> 3.0.x</A> 
<BR><A><B>Author:</B> Gecko</A><A class=ntext> <BR><BR>Many games use the view 
from a third person, where the camera shows the character "from the back" is, 
for example, many game genres Action and RPG, 3D-type ����������� Spyro or Crash 
Bandicoot, Sports simulators, and so on. In this case, as a rule, the camera is 
not rigidly fixed at a certain distance from the character - it usually moves 
smoothly, with some delay that adds realism and �������������������. <BR><BR>The 
Xtreme3D similar to the operator to realize only slightly more complicated than 
the view from first person. The following code creates a hierarchy from the 
character, which the player will manage, and cameras, which will be for him to 
follow. As a symbol of the Character uses a simple cubic meters. <BR><BR>The 
code in the event Create: <BR><BR><A>Camera = <A class=func2link 
href="../functions/camera.htm#CameraCreate">CameraCreate</A><A>(<B>global</B>.scene);</A> 
<BR><A class=func2link 
href="../functions/camera.htm#CameraSetViewDepth">CameraSetViewDepth</A><A>(Camera, 
800);</A> <BR><A class=func2link 
href="../functions/camera.htm#CameraSetFocal">CameraSetFocal</A><A>(camera, 
80);</A> <BR><A class=func2link 
href="../functions/viewer.htm#ViewerSetCamera">ViewerSetCamera</A><A>(view1, the 
camera);</A> <BR><BR><A>Actor <A class=func2link 
href="../functions/primitives.htm#CubeCreate">CubeCreate =</A><A>(1, 1, 1,<B> 
global</B>.scene);</A> <BR><BR><A>Target = <A class=func2link 
href="../functions/dummycube.htm#DummycubeCreate">DummycubeCreate</A><A>(actor);</A> 
<BR><A class=func2link 
href="../functions/object.htm#ObjectSetPosition">ObjectSetPosition</A><A>(target, 
0, 1, -4);</A> <BR><A class=func2link 
href="../functions/camera.htm#CameraSetTargetObject">CameraSetTargetObject</A><A>(camera, 
actor);</A> <BR><BR>Code in the event of the Step: <BR><BR><A><B>If the</B> <A 
class=type>keyboard_check</A>(<A class=constant>vk_up</A>) <A class=func2link 
href="../functions/object.htm#ObjectMove">ObjectMove</A><A>(actor, 10 * dt);</A> 
<BR><A><B>If the</B> <A class=type>keyboard_check</A>(<A 
class=constant>vk_down</A>) <A class=func2link 
href="../functions/object.htm#ObjectMove">ObjectMove</A><A>(actor, -10 * 
dt);</A> <BR><A><B>If the</B> <A class=type>keyboard_check</A>(<A 
class=constant>vk_left</A>) <A class=func2link 
href="../functions/object.htm#ObjectTurn">ObjectTurn</A><A>(actor, -200 * 
dt);</A> <BR><A><B>If the</B> <A class=type>keyboard_check</A>(<A 
class=constant>vk_right</A>) <A class=func2link 
href="../functions/object.htm#ObjectTurn">ObjectTurn</A><A>(actor, 200 * 
dt);</A> <BR><BR><A>Cx = <A class=func2link 
href="../functions/object.htm#ObjectGetAbsolutePosition">ObjectGetAbsolutePosition</A><A>(camera, 
0);</A> <BR><A>Cy = <A class=func2link 
href="../functions/object.htm#ObjectGetAbsolutePosition">ObjectGetAbsolutePosition</A><A>(camera, 
1);</A> <BR><A>Cz = <A class=func2link 
href="../functions/object.htm#ObjectGetAbsolutePosition">ObjectGetAbsolutePosition</A><A>(camera, 
2);</A> <BR><A>Tx = <A class=func2link 
href="../functions/object.htm#ObjectGetAbsolutePosition">ObjectGetAbsolutePosition</A><A>(target, 
0);</A> <BR><A>Ty = <A class=func2link 
href="../functions/object.htm#ObjectGetAbsolutePosition">ObjectGetAbsolutePosition</A><A>(target, 
1);</A> <BR><A>The TZ = <A class=func2link 
href="../functions/object.htm#ObjectGetAbsolutePosition">ObjectGetAbsolutePosition</A><A>(target, 
2);</A> <BR><A>Dx = tx - cx;</A> <BR><A>Dy = ty - cy;</A> <BR><A>Dz = the tz - 
cz;</A> <BR><A class=func2link 
href="../functions/object.htm#ObjectTranslate">ObjectTranslate</A><A>(camera, dx 
*0.05, dy * 0.05, dz * 0.05);</A> <BR><BR>The logic of the chamber is arranged 
so that its most long distance the distance from the character - when driving 
forward (so you can see what is happening around), and the closest - when 
driving in reverse. When turning the character the camera allows to consider it 
on the side. Approximately the same admission is used in racing simulations, so 
that, on the basis of this Code, it can be done and the engine races. 
</A></DIV></BODY></HTML>
