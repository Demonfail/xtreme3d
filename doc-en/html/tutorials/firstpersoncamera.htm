<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>The camera from the first person</TITLE>
<META content="text/html; charset=utf-8" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css href="../data/style.css">
<META name=GENERATOR content="MSHTML 8.00.6001.23536"></HEAD>
<BODY>
<DIV align=justify>
<H1 class=pagetitle>Lesson 4 <BR>The camera from the first person 
</H1><A><B>Level:</B> Beginner</A> <BR><A><B>Version of the Xtreme3D:</B> 
3.0.x</A> <BR><A><B>Author:</B> Gecko</A><A class=ntext> <BR><BR>In Lesson 3 we 
considered the simplest version of the camera from the first person - it was 
managed by the arrow. In the meantime, the absolute most modern games in this 
case management is used with the mouse. Let's look at how to implement his means 
Xtreme3D. <BR><BR>To begin with, we create the parent of the dummy for the 
camera - camPos. We will be moving, not the camera as well. <BR><BR><A>CamPos = 
<A class=func2link 
href="../functions/dummycube.htm#DummycubeCreate">DummycubeCreate</A>(<B>global</B>.scene);</A> 
<BR><A class=func2link 
href="../functions/object.htm#ObjectSetPosition">ObjectSetPosition</A>(camPos, 
0, 2, 0);</A> <BR><A>Camera = <A class=func2link 
href="../functions/camera.htm#CameraCreate">CameraCreate</A>(camPos);</A> <BR><A 
class=func2link 
href="../functions/viewer.htm#ViewerSetCamera">ViewerSetCamera</A>(view1, the 
camera);</A> <BR><BR>The fact is that the camera should only move in the xz 
plane - in other words, should not "fly" through the air. We will rotate the 
object of camPos in the Y-axis, when the user will unseat the mouse horizontally 
- thus, it will be possible to manage the direction of movement. Click on the 
offset in the vertical direction will cause the local turn the camera object on 
the X-axis - this way, the user will be able to look up and down, but this does 
not affect the direction of movement, because the camera inherits the movement 
from camPos. <BR><BR>Declare the following variables: <BR><BR><A>CenterX = 
</A><A class=type>display_get_width</A>()/2;</A> <BR><A>CenterY = </A><A 
class=type>display_get_height</A>()/2;</A> <BR><BR>It is the coordinates of the 
center of the screen. We will read the offset click on this point and then 
return it to the cursor. <BR><BR>You can also immediately put the cursor in the 
center of the screen, to the beginning of the game camera watched strictly 
forward: <BR><BR><A class=type>Display_mouse_set</A>(centerX and centerY);</A> 
<BR><BR>Now go to the event Step. The following code calculates the offset of 
mouse cursor on the center of the screen and turns the camPos and camera on the 
corners, deltaX and deltaY: <BR><BR><A>DeltaX = (centerX - <A 
class=type>display_mouse_get_x</A>()) / 3;</A> <BR><A>DeltaY = (centerY - <A 
class=type>display_mouse_get_y</A>()) / 3;</A> <BR><A class=func2link 
href="../functions/object.htm#ObjectRotate">ObjectRotate</A>(camera, DeltaY, 0, 
0).</A> <BR><A class=func2link 
href="../functions/object.htm#ObjectRotate">ObjectRotate</A>(camPos, 0, -deltaX, 
0);</A> <BR><A class=type>Display_mouse_set</A>(centerX and centerY);</A> 
<BR><BR>Left to realize the movement. We will use the standard for games from 
the first person the layout of the WASD: <BR><BR><A>Dt = 1.0 / room_speed;</A> 
<BR><A><B>If the</B> <A class=type>keyboard_check</A>(<A class=type>ord</A>('W') 
<A class=func2link 
href="../functions/object.htm#ObjectMove">ObjectMove</A>(camPos, -10 * dt);</A> 
<BR><A><B>If the</B> <A class=type>keyboard_check</A>(<A class=type>ord</A>('A') 
<A class=func2link 
href="../functions/object.htm#ObjectStrafe">ObjectStrafe</A>(camPos, 10 * 
dt);</A> <BR><A><B>If the</B> <A class=type>keyboard_check</A>(<A 
class=type>ord</A>('D') <A class=func2link 
href="../functions/object.htm#ObjectStrafe">ObjectStrafe</A>(camPos, -10 * 
dt);</A> <BR><A><B>If the</B> <A class=type>keyboard_check</A>(<A 
class=type>ord</A>('S') <A class=func2link 
href="../functions/object.htm#ObjectMove">ObjectMove</A>(camPos, 10 * dt);</A> 
<BR><BR>The meaning of the multiplying by dt in the following. If moving objects 
with a fixed speed, their actual speed will be tied to human frequency of 
application. That is, for example, if we move the selected object 10 units for 
the frame, the speed at 60 FPS will be equal to 10 * 60 = 600 units per second. 
At 120 FPS, respectively - 10 * 120 = 1200. In the end, the object will move 
faster or slower, depending on the FPS. This is not what we need, so you need to 
set the speed of the other values, and not attached to frame. For example, in 
units per second. Consequently, the manpower speed will be equal to the V / FPS, 
where V is the speed. We simply explore how an object should move in one shot, 
if the second it moves to the V units. Thus, the object will move with the 
correct speed when any personnel frequency. <BR><BR>Not to clutter the code 
ticks (division, as it is known, relatively slow operation), we instead, 
multiply the speed of 1 / FPS - This value can be calculated only once. It is 
also referred to as the step time (this step time should refer to the function 
of the Update, as mentioned in lesson 2). In the Game Maker 8 hr speed (FPS) 
usually is fixed and is set in the settings of the room (Room speed). It can be 
set equal to 60 or 120. </A></DIV></BODY></HTML>
