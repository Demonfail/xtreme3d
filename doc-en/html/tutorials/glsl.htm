<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>GLSL</TITLE>
<META content="text/html; charset=utf-8" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css href="../data/style.css">
<META name=GENERATOR content="MSHTML 8.00.6001.23536"></HEAD>
<BODY>
<DIV align=justify>
<H1 class=pagetitle>Lesson 19 <BR>GLSL basics </H1><A><B>Level:</B> 
experienced</A> <BR><A><B>Version of the Xtreme3D:</B> 3.0.x</A><A> 
<BR><A><B>Author:</B> Gecko</A><A class=ntext> <BR><BR>GLSL (OpenGL Shading 
Language) is a high-level language description of shaders. With it you can 
program the graphics pipeline - in other words, to manage the rendering of 
objects on the ��������� and pixel level. For the processing of peaks is 
responsible ��������� GLSL program, for processing pixels - �����������. 
<BR>Work with the GLSL implies knowledge of the principles of the dither and 
graphics OpenGL pipeline, as well as linear algebra. Since the Xtreme3D does not 
require such knowledge, the use of GLSL can be a very difficult task for a 
novice, therefore, it is recommended to pre-read books or manuals on the topic. 
A very useful will be acquaintance with the principles of the work in OpenGL, as 
well as at least a basic knowledge of C/C++. <BR>
<H1 class=name>The types of data GLSL </H1><BR><BR>GLSL is strictly 
�������������� language - any variable, it has a certain type. The language 
supports the following basic types: <BR><BR><A class=type>Bool</A> - boolean 
value <BR><A class=type>Int</A> - integer <BR><A class=type>Uint</A> - 
����������� integer <BR><A class=type>Float</A> - a floating point number single 
precision <BR><A class=type>Double</A> - a floating point number 
double-precision <BR><A class=type>Bvec2</A>, <A class=type>bvec3</A>, <A 
class=type>bvec4</A> is a vector of boolean values dimension (2, 3, and 4) 
<BR><A class=type>Ivec2</A>, <A class=type>ivec3</A>, <A class=type>ivec4</A> is 
a vector of integers <BR><A class=type>Uvec2</A>, <A class=type>uvec3</A>, <A 
class=type>uvec4</A> is a vector of Unsigned integers <BR><A class=type>The 
vec2</A>, the <A class=type>vec3</A>, the <A class=type>vec4</A> is a vector of 
numbers with a floating point <BR><A class=type>Dvecn2</A>, <A 
class=type>dvecn3</A>, <A class=type>dvecn4</A> is a vector of numbers with a 
floating point double-precision <BR><A class=type>Mat2</A>, <A 
class=type>mat3</A>, <A class=type>mat4</A> is a matrix of 2x2, 3x3, 4x4 <BR><A 
class=type>Sampler2D</A> - the texture of the <BR><A 
class=type>Sampler2DCube</A> - cubic texture <BR><A 
class=type>Sampler2DShadow</A> - Shadow Texture <BR><A class=type>Void</A> - 
keyword that indicates the absence of the type (for functions without the 
returned results). <BR>
<H1 class=name>Vertex Shader </H1><BR>��������� accepts the coordinates of the 
vertices and their attributes (such as normal the moment and) and, as a rule, 
puts them out of the object space into the amputation in the world or in species 
space. <BR><BR>- The<B> Object space</B> (object space) is a local space of 
object. The center of the coordinate system is the center of the object - top 
models are defined relative to the center. <BR>- The<B> world space</B> (world 
space) is another name for the absolute space. The center of the coordinate 
system, it is the point (0, 0, 0). The total transformation of the object 
(Transferring, rotation and scaling) puts the tops from the local to the global 
space. This transformation is typically stored and transmitted in the shader in 
the form of a matrix 4x4 - the so-called matrix model (model matrix). <BR>-<B> 
Species space</B> (eye space - a space in which the Center coordinate system is 
the position of the camera. Translation of the peaks of the world in species 
space is controlled by the reverse conversion Matrix - the so-called species 
matrix (view matrix). In OpenGL, as a rule, the model matrix and generic are 
combined in one ��������-������� (modelview matrix). <BR>-<B> Space 
amputation</B> (clip space - a space in which the vertices are translated a 
matrix projection (projection matrix). <BR>It should be noted that the tops of 
the GLSL is stored in the so-called homogeneous coordinates (homogeneous 
coordinates) - that is, have an additional fourth coordinate W. Such 
coordinates, you can express the infinitely distant point where W is equal to 
zero. Conventional terms have the W is equal to 1. <BR>Peaks in the space of 
amputation is the main result of the work of the vertex shader. The simplest 
vertex shader that performs only translation of vertices of the object space 
into the amputation, is as follows: <BR><BR><A class=type>Void</A><A> main()</A> 
<BR><A>{</A> <BR><A>&nbsp;&nbsp;<A class=constant>Gl_Position</A><A> = </A><A 
class=constant>gl_ModelViewProjectionMatrix</A><A> * </A><A 
class=constant>gl_Vertex</A><A>;</A> <BR><A>}</A> <BR><BR><A 
class=constant>Gl_Vertex</A> - input the coordinates of vertices <BR><A 
class=constant>Gl_Position</A> - The output coordinates of the vertices <BR><A 
class=constant>Gl_ModelViewProjectionMatrix</A> - integrated matrix of 4x4, the 
combination of The ��������-species and projection matrices of OpenGL. <BR>For 
this procedure, by the way, in the GLSL has a built-in function to ftransform: 
<BR><BR><A><A class=constant>Gl_Position</A><A> = </A><A 
class=type>ftransform</A><A>();</A> <BR><BR>Vertex Shader are also available 
from other attributes of the peak - normal, color and texture coordinates: <A 
class=constant>gl_Normal</A>, <A class=constant>gl_Color</A>, <A 
class=constant>gl_MultiTexCoordN</A> (where N is a number from 0 to 7). Usually 
these attributes of the interpolated between the three vertices of triangle, and 
then come in the ����������� shader. To transfer any value to the interpolation, 
used in varying intermediate variables. For example, here is the shader 
communicating to interpolate normal: <BR><BR><A class=type>Varying the 
vec3</A><A> normal;</A> <BR><BR><A class=type>Void</A><A> main()</A> 
<BR><A>{</A> <BR><A>&nbsp;&nbsp;Normal = </A><A 
class=constant>gl_NormalMatrix</A><A> * </A><A 
class=constant>gl_Normal</A><A>;</A> <BR><A>&nbsp;&nbsp;</A><A 
class=constant>Gl_Position</A> = </A><A class=type>ftransform</A><A>();</A> 
<BR><A>}</A> <BR><BR>Please note that we translate normal vertices of the object 
space for species with a special built-in a matrix of 3x3 <A 
class=constant>gl_NormalMatrix</A>. This is necessary so that the best way to 
count lights in pixel ������� - this is done in the species space: the fact that 
the camera is at (0,0,0), greatly facilitates the calculations related to the 
�������� component of the light. <BR>With the transfer of texture coordinates of 
the shader will look like this: <BR><BR><A class=type>Varying the vec3</A><A> 
normal;</A> <BR><BR><A class=type>Void</A><A> main()</A> <BR><A>{</A> 
<BR><A>&nbsp;&nbsp;Normal = </A><A class=constant>gl_NormalMatrix</A><A> * 
</A><A class=constant>gl_Normal</A><A>;</A> <BR><A>&nbsp;&nbsp;</A><A 
class=constant>Gl_TexCoord</A><A>[0] = </A><A 
class=constant>gl_MultiTexCoord0</A><A>;</A> <BR><A>&nbsp;&nbsp;</A><A 
class=constant>Gl_Position</A> = </A><A class=type>ftransform</A><A>();</A> 
<BR><A>}</A> <BR><BR><A class=constant>Gl_TexCoord</A> - this is a built in 
varying-variable, array, through which you can transfer any data, not only the 
texture coordinates. <BR>
<H1 class=name>����������� Shader </H1><BR>����������� accepts the interpolated 
varying variables (as well as the various options for the status of the OpenGL) 
and displays as a result of the color pixel. It is performed for each visible on 
the screen pixels of the object. Please note that checking visibility (Z-test) 
for pixel graphics is carried out prior to the completed ����������� program - 
if a pixel is discarded as an invisible, the program is not performed. <BR>The 
simplest ����������� shader, the painter's object a solid color, looks like 
this: <BR><BR><A class=type>Void</A><A> main()</A> <BR><A>{</A> 
<BR><A>&nbsp;&nbsp;</A><A class=constant>Gl_FragColor</A><A> = the </A><A 
class=type>vec4</A><A>(1.0, 0.0, 0.0, 1.0);</A> <BR><A>}</A> <BR><BR><A 
class=constant>Gl_FragColor</A> - output color pixel. <BR>In this case, the <A 
class=type>vec4</A><A>(1.0, 0.0, 0.0, 1.0)</A> refers to the red color with 
transparency 1.0 (Full Opacity). <BR>
<H1 class=name>The use of shaders in the Xtreme3D </H1><BR>Create GLSL shaders 
and connect them to the content is very simple: <BR><BR><A>Vp = </A><A 
class=func2link href="../functions/text.htm#TextRead">TextRead</A><A>('my_vertex 
shader.glsl');</A> <BR><A>Fp = </A><A class=func2link 
href="../functions/text.htm#TextRead">TextRead</A><A>('my_fragment_shader.glsl');</A> 
<BR><A>Shader = </A><A class=func2link 
href="../functions/shader.htm#GLSLShaderCreate">GLSLShaderCreate</A><A>(vp, 
fp);</A> <BR><A class=func2link 
href="../functions/material.htm#MaterialSetShader">MaterialSetShader</A><A>('myMaterial', 
shader);</A> <BR><BR>
<H1 class=name>Lighting on the GLSL </H1><BR>To realize the simplest lighting 
according to the formula of Lambert, we need the coordinates of the Point 
surface normal at this point, as well as the coordinates of the source of light. 
Thus, we need at least two varying variables - normal and interpolated vertex 
coordinates. <BR>Vertex Shader: <BR><BR><A class=type>Varying the vec3</A><A> 
normal;</A> <BR><A class=type>Varying the vec3</A><A> position;</A> <BR><BR><A 
class=type>Void</A><A> main()</A> <BR><A>{</A> <BR><A>&nbsp;&nbsp;Normal = 
</A><A class=constant>gl_NormalMatrix</A><A> * </A><A 
class=constant>gl_Normal</A>;</A> <BR><A>&nbsp;&nbsp;Position = (</A><A 
class=constant>gl_ModelViewMatrix</A><A> * </A><A 
class=constant>gl_Vertex</A><A>).xyz;</A> <BR><A>&nbsp;&nbsp;</A><A 
class=constant>Gl_Position</A><A> = </A></A><A 
class=type>ftransform</A><A>();</A> <BR><A>}</A> <PRE></PRE><BR><A class=constant>Gl_ModelViewMatrix</A> is a built-in matrix of 
4x4, The �������� generic matrix of OpenGL. It converts the coordinates of the 
object space for species in which we will calculate the lighting. As the result 
of this translation - a homogeneous vector of the <A class=constant>vec4</A>, we 
����������� coordinate W and charge only the vector of XYZ. <BR>����������� 
shader: <BR><BR><A>Varying the vec3 normal;</A> <BR><A>Varying the vec3 
position;</A> <BR><BR><A class=type>Void</A><A> main()</A> <BR><A>{</A> 
<BR><A>&nbsp;&nbsp;</A><A class=type>The vec3</A><A> N = </A><A 
class=type>normalize</A><A>(normal);</A> <BR><A>&nbsp;&nbsp;</A><A 
class=type>The vec3</A><A> L = </A><A class=type>normalize</A><A>(</A><A 
class=constant>gl_LightSource</A><A>[0].position.xyz - position);</A> 
<BR><A>&nbsp;&nbsp;</A><A class=type>Float</A><A> diffuse = </A><A 
class=type>clamp</A><A>(</A><A class=type>dot</A><A>(N, L), 0.0, 1.0);</A> 
<BR><A>&nbsp;&nbsp;</A><A class=type>The vec4</A><A> color = </A><A 
class=constant>gl_FrontMaterial</A><A>.diffuse * diffuse;</A> 
<BR><A>&nbsp;&nbsp;Color.a = 1.0;</A> <BR><A>&nbsp;&nbsp;</A><A 
class=constant>Gl_FragColor</A><A> = color;</A> <BR><A>}</A> <BR><BR>Please note 
that transfer in the ���������� ������ singular vectors (such as normal) after 
the interpolation is necessary ����������� - the graphics card does not make it 
for you. For this in the GLSL is a function <A class=type>normalize</A>. 
<BR>Access to the coordinates of the source of light is controlled by the 
position attribute the embedded object of <A class=constant>gl_LightSource</A> 
(array of 8 elements, according to the number of light sources OpenGL). These 
coordinates in the ����������� ������� is automatically transferred to the 
species space, which is very convenient - you do not need to do it manually. But 
if you are, for one reason or another, you need to calculate the lighting in 
another space - for example, in the space of the tangent - do not forget to 
transform them. These coordinates as a peer: point source of light, as a rule, 
has the coordinate of the W is equal to 1, aiming to equal 0. <BR>The operation 
<A class=type>dot</A><A>(N, L)</A> - this is the calculation of the light sensor 
according to the formula: Lambert illumination at the point is determined by the 
density of the light, and it is linearly dependent on the cosine of angle of 
incidence of the light. The cosine of the angle between two singular vectors is 
equal to the product of The ���������� (dot product). <BR>Because the result of 
this operation - a scalar (<A class=type>float</A>), for transfer to <A 
class=constant>gl_FragColor</A> ��������� need this value to any color. It is 
better to use Diffuse Color of material - <A 
class=constant>gl_FrontMaterial</A><A>.diffuse</A>: thus, you can control the 
color of the object out of the shader, the function of the <A class=func2link 
href="../functions/material.htm#MaterialSetDiffuseColor">MaterialSetDiffuseColor</A>. 
<BR>
<H1 class=name>The textures </H1><BR>In The ����������� ������� can read color 
from the textures - for this is the function of the <A class=type>texture2D</A>: 
<BR><BR><A class=type>The uniform sampler2D</A><A> diffuseTexture;</A> 
<BR><BR><A class=type>Void</A><A> main()</A> <BR><A>{</A> 
<BR><A>&nbsp;&nbsp;</A><A class=type>The vec4</A><A> texColor = </A><A 
class=type>texture2D</A><A>(diffuseTexture, </A><A 
class=constant>gl_TexCoord</A><A>[0].xy);</A> <BR><A>&nbsp;&nbsp;</A><A 
class=constant>Gl_FragColor</A><A> = texColor;</A> <BR><A>}</A> <BR><BR>The 
textures are declared as uniform objects - that is, the modifiable parameters 
are transferred to the shader core program. This may be not only the texture, 
but also any other data types. <BR>The transfer of the textures in the shader is 
done as follows: <BR><BR><A>Param </A><A class=func2link 
href="../functions/shader.htm#GLSLShaderCreateParameter">GLSLShaderCreateParameter</A><A>(shader, 
'diffuseTexture');</A> <BR><A class=func2link 
href="../functions/shader.htm#GLSLShaderSetParameterTexture">GLSLShaderSetParameterTexture</A><A>(param, 
'myMaterial', 0);</A> <BR><BR><BR>In the function of the 
GLSLShaderCreateParameter is transferred to the name of the uniform object. In 
the function of the <A class=func2link 
href="../functions/shader.htm#GLSLShaderSetParameterTexture">GLSLShaderSetParameterTexture</A> 
is transferred to the name of the material, from which you want to read the 
texture, as well as the texture unit, through which you want to transfer the 
texture. The OpenGL standard guarantees 8 available texture units (0-7) - the 
modern video cards they can be and more (up to 16 or even 32), but for the best 
compatibility it is recommended not to use more than 8. In one ������� cannot 
transmit two different textures through one and the same texture unit - that is, 
if you submit multiple textures in different uniform-parameters, use the 
different blocks. <BR>
<H1 class=name>About the versions of the GLSL </H1><BR>Xtreme3D is based on the 
OpenGL 1.x and some of the functions of the OpenGL 2.x, which are connected 
through the expansion of the ARB. Thus, the engine supports GLSL versions 1.1 
and 1.2 - later versions of the language defined in the OpenGL specification 
3.0. <BR>The default is GLSL 1.1. To switch to 1.2, use the preprocessor 
directive (on the first line of the shader): <BR><BR><A class=green>#Version 
120</A> <BR><BR>Version 1.2 is built-in support for transposition of matrices 
(the function transpose), ������������ matrices, as well as arrays. 
</A></DIV></BODY></HTML>
