<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=us-ascii">
<TITLE>Xtreme3D basics</TITLE>
<LINK href="../data/style.css" type="text/css" rel="stylesheet">
</HEAD>
<BODY>

<DIV ALIGN=justify>

<H1 class=pagetitle>Tutorial 1<BR>Xtreme3D basics</H1>
<A><B>Level:</B> Beginner</A> <BR>
<A><B>Xtreme3D version:</B> 3.x</A> <BR>
<A><B>Author:</B> Gecko</A>
<A class=ntext> <BR><BR>So, what is Xtreme3D? <BR>First of all, it is a scene consisting of objects. The object is a main concept in Xtreme3D. This is not the same as the object in terms of Game Maker. Objects in Xtreme3D are created and managed solely in GML code. 3D models, primitives, skyboxes, billboards and HUD - all of these are scene objects. 
<BR><BR>All scene objects are part of the scene graph, a tree-like hierarchy. Any object can have one or more child objects. In this case it is called a parent object for them. Child objects, in turn, may have their own children, and so on. What are the benefits of this approach, you may wonder? For example, if you hide any object, all its children (and, accordingly, their children also) will be hidden as well. At the same time you can unhide any of the children, and this will not affect higher objects in the hierarchy. This, of course, is not the only use case. Child objects inherit a number of other characteristics of their parent. For example, child object becomes tied to parent's coordinate system. Children can move and rotate, but when parent moves and rotates, the coordinate system of its children changes accordingly. Imagine a ship: passengers can move freely on the deck or stand still, but all of them are actually moving with the ship.
<BR><BR>Object's position, rotation and scale are combined under general term "transformation". All transformations are performed with respect to some coordinate system. There is a global coordinate system where world X-axis points right, world Y-axis points up, and world Z-axis points forward. It is also called absolute or world coordinates. Objects also have local coordinate system which depends on their parent transformation, as described above. Any object can be transformed both with respect to local coordinate system and absolute coordinate system (latter case actually calculates local transformation that corresponds to desired absolute transformation taking local coordinate system to account). Using this apparatus you can define complex object structures with ease.
<BR><BR>Object's movement (that is, a change of position) relates to a concept of a vector. Vector is a fairly generic term, but in Xtreme3D we can think of it as a line segment beginning from coordinate system origin (0, 0, 0) and ending in arbitrary point in space. Usually three-component vector is both a point and a direction to that point from origin. Vectors can be coordinate-wise added and subtracted to make new vectors. Movement in three-dimensional space can be seen as summing two vectors (position vector and translation vector).
<BR><BR>If we imagine vectors as line segments, it is obvious that they have length, which is simply a distance from origin. It can be calculated using Pythagorean theorem (square root of the sum of vector's squared components). Length of a vector is very important and widely used concept. Vector of unit length is called normalized vector (or unit vector). Any vector with non-zero length can be normalized - that is, scaled to unit length - by dividing all its components with vector's length. Normalized vector is convenient to define a direction to some point without knowing the distance to it. Using normalized vector as a direction we can calculate object's translation by component-wise multiplying direction with speed.
<BR><BR>In Xtreme3D any object has a direction vector, accompained by mutually orthogonal 'right' and 'up' vectors, which together form its transformation basis. When object rotates, basis also rotates. Using these basis vectors we can easily move an object in three basic directions - forward, right and up. Xtreme3D already includes functions for these movements. In engine's terms, forward movement is called simply 'move', rightside movement is called 'strafe', and upwards movement is called 'lift'. These are always done in object's local coordinate system. 
<BR><BR>Rotation of an object is a set of angles that object is rotated by, defined for each local axis - X, Y, and Z. Angles are measured in degrees. Rotating about X-axis is called 'pitch', rotating about Y-axis is called 'turn', and rotating about Z-axis is called 'roll'. 
<BR><BR>Scale of an object is a vector that defines non-uniform scaling along three local axes. 
</A></DIV></BODY></HTML>

