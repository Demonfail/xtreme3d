<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Collision test</TITLE>
<META content="text/html; charset=utf-8" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css href="../data/style.css">
<META name=GENERATOR content="MSHTML 8.00.6001.23536"></HEAD>
<BODY>
<DIV align=justify>
<H1 class=pagetitle>Lesson 11 <BR>Collision test </H1><A><B>Level:</B> medium<A> 
<BR><A><B>Version of the Xtreme3D:</B> 3.0.x</A> <BR><A><B>Author:</B> 
Gecko</A><A class=ntext> <BR><BR>In the games very often, it is required to 
define the fact of collision between two objects. They can be, for example, the 
character and the Platform, shell and purpose, and so on. The collision 
detection is based logic, the shooters ������������, simulations, role-playing 
games and some of the Strategies. If this does not always want to find the exact 
intersection of two polygon ����� - enough to test the intersection of limiting 
their scope (Bounding Sphere) or ��������������� (Bounding Box). Xtreme3D 
includes easy-to-use tools that allow you to do this. <BR><BR>Function test 
collisions in the Xtreme3D begin with "ObjectCheck..." and operate on 
restricting the spheres and ����������������� objects, which are calculated 
using the engine automatically, depending on the volume, which is their 
geometry. Restricting the ��������������� (which in these functions are called 
the Cube) aligned to the local coordinate axes of the object - that is, can 
rotate with him. Such ��������������� is often called Oriented Bounding Box, or 
abbreviated OBB. Functions return true (1) If a crossing, and lie (0) otherwise. 
<BR><BR>Xtreme3D includes the following function test collisions: <A 
class=func2link 
href="../functions/object.htm#ObjectCheckSphereVsSphere">ObjectCheckSphereVsSphere</A>, 
<A class=func2link 
href="../functions/object.htm#ObjectCheckSphereVsCube">ObjectCheckSphereVsCube</A>, 
<A class=func2link 
href="../functions/object.htm#ObjectCheckCubeVsCube">ObjectCheckCubeVsCube</A>, 
<A class=func2link 
href="../functions/object.htm#ObjectCheckCubeVsFace">ObjectCheckCubeVsFace</A>, 
<A class=func2link 
href="../functions/object.htm#ObjectCheckFaceVsFace">ObjectCheckFaceVsFace</A>. 
The last two of them operate on the objects of the type of Freeform - 
accordingly, can detect the crossing of the parallelepiped bounding one object 
with the polygon model of the other, as well as the intersection of the two 
models. This test is rather slow, therefore, it is recommended to optimize its 
use - for example, to carry out an accurate test between the models only if the 
collision was detected between their limiting areas: <BR><BR><A><B>If</B></A> <A 
class=func2link 
href="../functions/object.htm#ObjectCheckSphereVsSphere">ObjectCheckSphereVsSphere</A><A>(obj1, 
obj2)</A> <BR><A>{</A> <BR><A>&nbsp;&nbsp;<B>If</B> </A><A class=func2link 
href="../functions/object.htm#ObjectCheckFaceVsFace">ObjectCheckFaceVsFace</A><A>(obj1, 
obj2)</A> <BR><A>&nbsp;&nbsp;{</A> <BR><A>&nbsp;&nbsp;&nbsp;&nbsp;<A 
class=green>// Do something</A> <BR><A>&nbsp;&nbsp;}</A> <BR><A>}</A> 
<BR><BR>These functions are useful when you need to perform a discrete test - 
that is, when it can be argued that the objects are moving with small speeds. If 
the speed of high, and the object in one step of game time flies the distance 
greater than the size of another object, the discrete checking can easily fail. 
A universal solution to this problem so far, no, but there are a variety of 
simplified methods. The easiest method - "throwing rays" (Ray Casting). In the 
Xtreme3D have enough effective implementation of this method. From the center of 
the object beam is produced in the direction of the Direction of the object. 
Then the intersection with this ray checked the target object, one or a few. 
Thus, it is possible to simulate the movement of the bullets (under the 
assumption that it is moving with infinite speed) - instantly find the point at 
which it enters. Using the "throwing rays" can be used to determine the height 
of the land under the character that is necessary for realization of the jumps. 
In addition, this method is indispensable for the building of the logic of the 
interaction of the character with interactive objects and triggers - Imagine, 
for example, the shooter, RPG or a quest from the first person, where the player 
can pick up objects and to press on the levers, by clicking on them with the 
mouse. To do this, you can estimate the distance between the player and the 
object, and then apply "throwing rays": <BR><BR><A><B>If</B></A> <A 
class=func2link 
href="../functions/object.htm#ObjectGetDistance">ObjectGetDistance</A><A>(player 
item) &lt;= 1.0</A> <BR><A>{</A> <BR><A>&nbsp;&nbsp;<B>If</B> </A><A 
class=func2link 
href="../functions/object.htm#ObjectRaycast">ObjectRaycast</A><A>(player 
item)</A> <BR><A>&nbsp;&nbsp;{</A> <BR><A>&nbsp;&nbsp;&nbsp;&nbsp;Hit x = </A><A 
class=func2link 
href="../functions/object.htm#ObjectGetCollisionPosition">ObjectGetCollisionPosition</A><A>(0);</A> 
<BR><A>&nbsp;&nbsp;&nbsp;&nbsp;Hit_y = </A><A class=func2link 
href="../functions/object.htm#ObjectGetCollisionPosition">ObjectGetCollisionPosition</A><A>(1);</A> 
<BR><A>&nbsp;&nbsp;&nbsp;&nbsp;Hit_z = </A><A class=func2link 
href="../functions/object.htm#ObjectGetCollisionPosition">ObjectGetCollisionPosition</A><A>(2);</A> 
<BR><A>&nbsp;&nbsp;}</A> <BR><A>}</A> <BR><BR>What is the most pleasant, 
"throwing rays" in the Xtreme3D is fully compatible with the objects of Freeform 
and gives correct results in any transformation of the objects. 
<BR></A></DIV></BODY></HTML>
