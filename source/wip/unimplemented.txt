
{
// TODO:
function FreeformCreateEmpty(matl1, matl2, parent: real): real; stdcall;
var
  ffm: TGLFreeForm;
  ml: TGLMaterialLibrary;
  ml2: TGLMaterialLibrary;
begin
  ml:=TGLMaterialLibrary(trunc64(matl1));
  ml2:=TGLMaterialLibrary(trunc64(matl2));
  if not (parent=0) then
    ffm := TGLFreeForm.CreateAsChild(TGLBaseSceneObject(trunc64(parent)))
  else
    ffm := TGLFreeForm.CreateAsChild(scene.Objects);
  ffm.MaterialLibrary:=ml;
  ffm.LightmapLibrary:=ml2;
  result:=Integer(ffm);
end;

function FreeformAddMesh(ff: real): real; stdcall;
var
  ffm: TGLFreeForm;
  mesh: TMeshObject;
begin
  ffm := TGLFreeForm(trunc64(ff));
  mesh := TMeshObject.CreateOwned(ffm.MeshObjects);
  result := ffm.MeshObjects.Count-1;
end;

function FreeformMeshAddFacegroup(ff, m: real; matname: pchar): real; stdcall;
var
  ffm: TGLFreeForm;
  mesh: TMeshObject;
  fgroup: TFaceGroup;
begin
  ffm := TGLFreeForm(trunc64(ff));
  mesh := ffm.MeshObjects[trunc64(m)];
  fgroup := TFaceGroup.CreateOwned(mesh.FaceGroups);
  fgroup.MaterialName := String(matname);
  result := mesh.FaceGroups.Count-1;
end;
}

{
// TODO: this seems not working
function FreeformSetLightmapsFromFreeform(ff1, ff2: real): real; stdcall;
var
  GLFreeForm1,GLFreeForm2: TGLFreeForm;
  mesh1, mesh2: TMeshObject;
  fg1, fg2: TFaceGroup;
  tc2: TAffineVectorList;
  sc: TTexPointList;
  tcc2, ti, mi, fgi, mati: Integer;
  lmapLib: TGLMaterialLibrary;
  lmapMat: String;
  mat: TGLLibMaterial;
  v: TAffineVector;
  t: TTexPoint;
begin
  GLFreeForm1:=TGLFreeForm(trunc64(ff1));
  GLFreeForm2:=TGLFreeForm(trunc64(ff2));

  lmapLib := GLFreeForm2.LightmapLibrary;
  GLFreeForm1.LightmapLibrary := lmapLib;

  for mi:=0 to GLFreeForm1.MeshObjects.Count-1 do begin
    mesh1 := GLFreeForm1.MeshObjects[mi];
    mesh2 := GLFreeForm2.MeshObjects[mi];

    mesh1.LightMapTexCoords.Count := 0;
    for ti:=0 to mesh2.TexCoords.Count-1 do begin
      v := mesh2.TexCoords[ti];
      mesh1.LightMapTexCoords.Add(v[0], v[1]);
    end;

    for fgi:=0 to mesh1.FaceGroups.Count-1 do begin
      fg1 := mesh1.FaceGroups[fgi];
      fg2 := mesh2.FaceGroups[fgi];

      lmapMat := fg2.MaterialName;

      for mati:=0 to lmapLib.Materials.Count-1 do begin
        mat := lmapLib.Materials[mati];

        if ansicomparestr(mat.Name, lmapMat) = 0 then begin
          fg1.LightMapIndex := mati;
          
          Break;
        end;
      end;
    end;
  end;

  result:=1;
end;
}

// ObjectInFrustrum - unimplemented
// ObjectIsCulled - unimplemented
{
// ObjectInFrustrum = ObjectInFrustum
function ObjectInFrustum(obj1, viewer: real): real; stdcall;
var
  object1: TGLBaseSceneObject;
  v: TGLSceneViewer;
  matMVP: TMatrix;
  frustum : TFrustum;
  intersectPoint : TVector;
begin
  v := TGLSceneViewer(trunc64(viewer));
  object1:=TGLBaseSceneObject(trunc64(obj1));
  //object1.Visible
  matMVP:=MatrixMultiply(v.Buffer.ModelViewMatrix, v.Buffer.ProjectionMatrix);
  frustum:=ExtractFrustumFromModelViewProjection(matMVP);
  if (IntersectLinePlane(
      GLArrowLineX.Position.AsVector,
      GLArrowLineX.Direction.AsVector,
      frustum.pLeft, @intersectPoint)=1)
  then
  begin
  end;
  result := 1;
end;
}


function MaterialLoadTexture(mtrl, filename: pchar): real; stdcall;
var
  mat:TGLLibMaterial;
begin
  mat:=matlib.Materials.GetLibMaterialByName(mtrl);
  mat.Material.Texture.Image.LoadFromFile(String(filename));
  result:=1;
end;


// OdeVehicle functionality is experimental
// and does not work properly for now

{

function OdeVehicleCreate(parent: real): real; stdcall;

var
  veh: TGLODEVehicle;
begin
  if not (parent=0) then
    veh := TGLODEVehicle.CreateAsChild(TGLBaseSceneObject(trunc64(parent)))
  else
    veh := TGLODEVehicle.CreateAsChild(scene.Objects);
  result := Integer(veh);
end;


function OdeVehicleSetScene(vehicle, obj: real): real; stdcall;

var
  veh: TGLODEVehicle;
begin
  veh := TGLODEVehicle(trunc64(vehicle));
  veh.RaycastScene := TGLBaseSceneObject(trunc64(obj)); 
  result := 1.0;
end;


function OdeVehicleAddSuspension(vehicle, x, y, z, wheelradius, maxlen: real): real; stdcall;

var
  veh: TGLODEVehicle;
  susp: TGLODEVehicleSuspension;
begin
  veh := TGLODEVehicle(trunc64(vehicle));
  susp := veh.AddSuspension(AffineVectorMake(x, y, z));
  susp.WheelRadius := wheelradius;
  susp.MaxLength := maxlen;
  susp.Stiffness := 5.0;
  susp.Damping := 0.5;
  susp.Compression := 0.0;
  susp.Length := 0.0;
  susp.LengthPrev := 0.0;
  result := Integer(susp);
end;


function OdeVehicleSuspensionGetWheel(suspension: real): real; stdcall;

var
  susp: TGLODEVehicleSuspension;
begin
  susp := TGLODEVehicleSuspension(trunc64(suspension));
  result := Integer(susp.Wheel);
end;


function OdeVehicleSuspensionSetSteeringAngle(suspension, angle: real): real; stdcall;

var
  susp: TGLODEVehicleSuspension;
begin
  susp := TGLODEVehicleSuspension(trunc64(suspension));
  susp.SteeringAngle := angle;
  result := 1.0;
end;


function OdeVehicleSetForwardForce(vehicle, f: real): real; stdcall;

var
  veh: TGLODEVehicle;
begin
  veh := TGLODEVehicle(trunc64(vehicle));
  veh.ForwardForce := f;
  result := 1.0;
end;

}