<HTML>
<HEAD>
<META http-equiv=Content-Type content="text/html; charset=windows-1251">
<TITLE>Shader</TITLE>
<LINK href="../data/style.css" type=text/css rel=stylesheet>
</HEAD>
<BODY>

<DIV ALIGN=justify>

<H1 class=name>Shader</H1>
<A class=type>Shader | Шейдер</A>
<HR>
<A>
Микропрограмма для одной из ступеней графического конвейера, используемая для 
определения окончательных параметров объекта или изображения. Она может включать в себя 
произвольной сложности описание поглощения и рассеяния света, наложения текстуры, 
отражение и преломление, затенение, смещение поверхности и эффекты пост-обработки.
<BR>
<BR>В настоящее время шейдеры делятся на четыре типа: вершинные, геометрические, параллаксные 
и фрагментные (пиксельные).
<BR>
<BR><B>Вершинные шейдеры</B> (Vertex Shader)
<BR>Вершинный шейдер оперирует данными, сопоставленными с вершинами многогранников. 
К таким данным, в частности, относятся координаты вершины в пространстве, текстурные 
координаты, тангенс-вектор, векторы нормали и бинормали. Вершинный шейдер может 
быть использован для видового и перспективного преобразования вершин, генерации текстурных 
координат, расчета освещения и т.д.
<BR>
<BR><B>Геометрические шейдеры</B> (Geometry Shader)
<BR>Геометрический шейдер, в отличие от вершинного, способен обработать не только одну 
вершину, но и целый примитив. Это может быть отрезок (две вершины) и треугольник (три 
вершины), а при наличии информации о смежных вершинах (adjacency) может быть обработано 
до шести вершин для треугольного примитива. Кроме того геометрический шейдер способен 
генерировать примитивы «на лету», не задействуя при этом центральный процессор. 
<BR>
<BR><B>Фрагментные (пиксельные) шейдеры</B> (Fragment Shader)
Фрагментный шейдер работает с фрагментами изображения. Под фрагментом изображения в данном 
случае понимается пиксель, которому поставлен в соответствие некоторый набор атрибутов, 
таких как цвет, глубина, текстурные координаты. Фрагментный шейдер используется на 
последней стадии графического конвейера для формирования фрагмента изображения.
<BR>
<BR>Существует три основные группы языков программирования для GPU. 
<BR>
К первой группе относятся языки, используемые при рендеринге изображений и анимации в 
таких областях, как кино, телевидение, промышленный дизайн и архитектурные визуализации: 
<BR>
<BR><B>RenderMan Shading Language (RSL)</B> - разработан и используется студией Pixar. 
Является фактическим стандартом в профессиональном рендеринге. 
<BR>
<BR><B>Gelato</B> - разработан компанией nVidia. Представляет собой гибридную систему рендеринга 
изображений и анимации, использующую для расчетов центральные процессоры и аппаратные 
возможности профессиональных видеокарт серии Quadro FX.
<BR>
<BR><B>Vector Expressions (VEX)</B> - разработан Side Effects Software как часть пакета Houdini. 
Является аналогом RenderMan.
<BR>
<BR>Во вторую группу входят языки, предоставляющие доступ к вычислительным возможностям 
видеокарт при рендеринге в реальном времени. Они широко используются при разработке 
компьютерных игр и других мультимедийных приложений.
<BR>
<BR><B>Низкоуровневый шейдерный язык OpenGL (ARB)</B> - по синтаксису схож с ассемблером. Доступен 
в виде расширений ARB_vertex_program, ARB_fragment_program. Является утвержденным 
промышленным стандартом.
<BR>
<BR><B>OpenGL Shading Language (GLSL)</B> - высокоуровневый шейдерный язык OpenGL. 
Основан на синтаксисе ANSI C. 
Большинство возможностей C сохранено; к ним добавлены векторные и матричные типы данных, 
часто применяющиеся при работе с трехмерной графикой. В контексте GLSL шейдером называется 
независимо компилируемая единица, написанная на этом языке. Программой называется набор 
откомпилированных шейдеров, связанных вместе.
<BR>Изначально GLSL 1.10 был доступен в виде набора расширений GL_ARB_shading_language_100, 
GL_ARB_shader_objects. Начиная с OpenGL 2.0, стал частью стандарта. 
<BR>С релизом OpenGL 3.3, GLSL меняет нумерацию версий. Теперь номер версии GLSL 
соответствует версии OpenGL.
<BR>
<BR><B>С for graphics (Cg)</B> - высокоуровневый шейдерный язык, разработанный компанией nVidia 
совместно с Microsoft (аналогичный язык от Microsoft - HLSL, является частью DirectX 9 и 10). 
Работает как с OpenGL, так и с DirectX, поддерживает различные программные и аппаратные 
платформы.
<BR>Основан на C, использует схожие типы данных. Поддерживаются функции и структуры. 
Включает своеобразную оптимизацию в виде упакованных массивов (packed arrays) — 
объявления «float a[4]» и «float4 a» в нём соответствуют разным типам. 
Второе объявление и есть упакованный массив, операции с которым выполняются быстрее, 
чем с обычным.
<BR>
<BR><B>Низкоуровневый шейдерный язык DirectX (DirectX ASM)</B> - по синтаксису схож с ассемблером. 
Существует несколько версий, различающихся по набору команд, а также по требуемому 
оборудованию. 
<BR>
<BR><B>High Level Shader Language (HLSL)</B> - высокоуровневый шейдерный язык DirectX 
(поддерживается также игровыми консолями Xbox и Xbox 360). 
Является надстройкой над DirectX ASM. По синтаксису сходен с C, позволяет использовать 
структуры и функции.
<BR>
<BR>Третью группу составляют языки широкой специализации, предназначенные в основном для 
научных вычислений. Они эффективно используют многоядерные CPU и GPGPU для ускорения 
обработки больших массивов данных.
<BR>
<BR><B>Sh</B> - высокоуровневый язык метапрограммирования GPU, входит в подмножество языка С++. 
Изначально был разработан группой RapidMind (которая впоследствии стала частью Intel), в настоящее 
время распространяется по лицензии GNU LGPL и поддерживается сообществом. 
<BR>
<BR><B>Compute Unified Device Architecture (CUDA)</B> - технология, разработанная компанией nVidia 
для описания алгоритмов, выполняемых на видеокартах GeForce (8 и старше), Quadro и Testla. 
CUDA использует упрощенный вариант C с набором инструкций для GPU. В состав CUDA SDK входит 
собственный Си-компилятор nvcc.
CUDA поддерживает DirectX, OpenGL, OpenCL и существует в версиях для Linux, Mac OS X и Windows.
<BR>
<BR><B>BrookGPU</B> - проект Стэнфордского университета. Изначально возник как язык для 
программирования потоковых архитектур. Представляет собой C-подобный язык, в который добавлен 
тип данных - массив специального вида ("поток" в терминологии языка). В 2004 году появилась его 
реализация для графических процессоров. В настоящее время используется как язык программирования GPU 
AMD и поставляется вместе с AMD CTM SDK.
<BR>
</A>
<HR>
<!-- <img src=../data/Mipmapping.jpg align="left"> -->
<DIV>

</BODY>
</HTML>