<HTML>
<HEAD>
<META http-equiv=Content-Type content="text/html; charset=windows-1251">
<TITLE>Библиотека материалов</TITLE>
<LINK href="../data/style.css" type=text/css rel=stylesheet>
</HEAD>
<BODY>

<DIV ALIGN=justify>

<H1 class=pagetitle>Урок 5<BR>Библиотека материалов</H1>

<A><B>Уровень:</B> начинающий</A>
<BR><A><B>Версия Xtreme3D:</B> 2.0.x</A><A>
<BR>
<BR>Одна из самых замечательных особенностей Xtreme3D — использование библиотеки материалов. Материал — 
это набор параметров, определяющих внешний вид объекта. В этот набор входят значения цвета, прозрачности, 
текстуры, типа смешивания и т.д. Понятие материала в Xtreme3D куда более фундаментально, чем во многих 
других движках. Очень часто под материалом понимается текстура, но в Xtreme3D материал может и не иметь 
текстуры. В других случаях система материалов бывает непродуманной или неполной, чего нельзя сказать о Xtreme3D.
<BR>
<BR>Материал создается один раз и может быть применен к любому количеству объектов, поддерживающих материалы. 
Изменение параметров материала коснется всех объектов, использующих этот материал. Такой принцип дает 
ощутимые выгоды (экономия памяти, объема кода, времени и труда программиста), хотя может вызвать и определенные 
неудобства (например, если необходимо, чтобы изменения параметров материала коснулись только одного конкретного 
объекта). Материал в Xtreme3D имеет уникальное имя, по которому осуществляется изменение  параметров. Имя 
задается строковым значением, например «mGround».
<BR>
<BR>Библиотекой материалов (Material Library) называется специальная конструкция, содержащая список материалов. 
Библиотека может быть активной или неактивной. В первом случае в нее можно добавлять материалы, настраивать их 
и применять к объектам. Во втором случае это невозможно. Поскольку разные библиотеки могут содержать материалы 
с одинаковыми именами, нельзя сделать активными две или более библиотеки одновременно.
<BR>
<BR>Смысл в использовании нескольких библиотек материалов заключается в возможности определять для них индивидуальные 
пути к текстурам. Эти пути учитываются при загрузке моделей, использующих внешние файлы текстур. По умолчанию 
библиотеки ищут текстуры в рабочей директории игры. Разумеется, хранить их там — не самая лучшая идея. 
Несомненно, лучше распределить их по отдельным папкам. Например, если у вас есть три папки с тремя разными 
моделями уровней, то можно будет создать для каждой из них свою библиотеку материалов и назначить им пути к 
текстурам, соответствующие искомым папкам. 
<BR>
<BR>Существует поистине огромное количество разнообразных настроек материалов. Кроме того, материалы позволяют 
применять к ним шейдеры, «фотографировать» в них картинки с экрана или с камеры, а также хранить различные 
невизуальные данные, например, маски и карты высот. Охватить в одной статье все возможности, которыми располагает 
система материалов Xtreme3D, просто нереально. Поэтому мы рассмотрим только самые основные: цвет, текстуру и 
несколько других.
<BR>
<BR>Сначала создается и активируется библиотека материалов:
<BR>
<BR>matlib=</A><A class=func2link href=../functions/material.htm#MaterialLibraryCreate>MaterialLibraryCreate</A><A>();
<BR></A><A class=func2link href=../functions/material.htm#MaterialLibraryActivate>MaterialLibraryActivate</A><A>(matlib);
<BR>
<BR>Теперь можно создавать сами материалы:
<BR>
<BR></A><A class=func2link href=../functions/material.htm#MaterialCreate>MaterialCreate</A><A>('mTexture','texture.jpg');
<BR>
<BR>Эта функция одновременно создает материал и присваивает ему текстуру из файла. Xtreme3D поддерживает 
форматы BMP, JPG, PNG, PCX, PSD, TGA, TIF, DDS. Рекомендуется использовать текстуры со стороной, равной 128, 
256, 512 и прочим степеням двойки. Текстура не обязательно должна быть квадратной.
<BR>
<BR>Вы можете создать материал без текстуры, просто оставив строку имени файла пустой:
<BR>
<BR></A><A class=func2link href=../functions/material.htm#MaterialCreate>MaterialCreate</A><A>('mColor','');
<BR>
<BR>В этом случае можно задать цвет материала. Проще всего это сделать функцией
<BR>
<BR></A><A class=func2link href=../functions/material.htm#MateriaSetDiffuseColor>MaterialSetDiffuseColor</A><A>('mColor',</A><A class=constant>c_red</A><A>,1);
<BR>
<BR>Цвет вы можете передать встроенными константами GML (</A><A class=constant>с_red</A><A>, 
</A><A class=constant>c_yellow</A><A>, </A><A class=constant>c_green</A><A> и др.), функциями 
</A><A class=type>make_color_rgb</A><A>(r,g,b) или </A><A class=type>make_color_hsv</A><A>(h,s,v) для 
соответствующих цветовых моделей (RGB и HSV), 
а также в обратном шестнадцатиричном формате, например, $0000FF означает красный.
<BR>
<BR>Кроме цвета, функция </A><A class=func2link href=../functions/material.htm#MateriaSetDiffuseColor>MaterialSetDiffuseColor</A><A> задает 
значение прозрачности — альфа — лежащее в промежутке 
от 0 до 1. Альфа в нашем случае равно 1 (полная непрозрачность).
<BR>
<BR>Строго говоря, </A><A class=func2link href=../functions/material.htm#MateriaSetDiffuseColor>MaterialSetDiffuseColor</A><A> задает 
только один из компонентов цвета материала, а всего их 
три — Ambient, Diffuse, Specular и Emission. Такое разделение связано с тем, что участки поверхности с 
различным уровнем освещенности могут иметь разный цвет. Ambient задает общий оттенок материала, не зависящий 
от освещения, Diffuse — цвет освещенной стороны, Specular — цвет блика, Emission — цвет имитации 
самосвечения. Более того, сами источники освещения также имеют собственные компоненты Ambient, 
Diffuse и Specular, и это делает цвет объектов еще более сложным и многообразным. Но не пугайтесь, мы в 
этой статье не будем влезать в эти «дебри». А вообще, настройка цветовой гаммы материалов и освещения — 
дело очень важное. Хорошая цветовая гамма даст вам больше, чем все шейдеры и спецэффекты, вместе взятые.
<BR>
<BR>Вы можете отключить для материала освещение (и, заодно, влияние тумана, о котором пойдет речь чуть позже):
<BR>
<BR></A><A class=func2link href=../functions/material.htm#MaterialSetOptions>MaterialSetOptions</A><A>('mColor',1,0); 
<BR>
<BR>Первый параметр, в данном случае равный 1, отвечает за влияние тумана, второй — за влияние освещения.
<BR>
<BR>Применить созданный материал к объекту очень просто:
<BR>
<BR></A><A class=func2link href=../functions/object.htm#ObjectSetMaterial>ObjectSetMaterial</A><A>(object,'mTexture');
<BR>
<BR>Кстати, вернемся к материалу с текстурой. С этой текстурой можно творить удивительные вещи! Например, изменение 
режима проецирования на сферический сделает материал похожим на отражение на металле:
<BR>
<BR></A><A class=func2link href=../functions/material.htm#MaterialSetTextureMappingMode>MaterialSetTextureMappingMode</A><A>('mTexture',</A><A class=constant>tmmSphere</A><A>);
<BR>
<BR>А чтобы многократно повторить текстуру на поверхности объекта, меняется ее масштаб:
<BR>
<BR></A><A class=func2link href=../functions/material.htm#MaterialSetTextureScale>MaterialSetTextureScale</A><A>('mTexture',10,10);
<BR>
<BR>При этом текстура повторится десять раз.
<BR>
<BR>В качестве самостоятельной работы попробуйте создать и наложить материалы на планеты из предыдущего урока про 
иерархию. В качестве текстур можно использовать реальные карты поверхности Земли и Луны. А Солнце можно 
оставить без текстуры и сделать просто желтым. Вспомните также, как создается источник освещения и сделайте 
его дочерним для Солнца, чтобы оно излучало свет (в этом случае стоит отключить освещение для его материала). 

</A>

</DIV>

</BODY>
</HTML>